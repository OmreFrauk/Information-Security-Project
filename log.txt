2025-06-08 12:16:02,390 [INFO] [server.py:<module>] Server starting
2025-06-08 12:16:02,458 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:16:19,242 [INFO] [device.py:<module>] Device started
2025-06-08 12:16:19,310 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:16:19,310 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:16:19,310 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 56807)
2025-06-08 12:16:19,310 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 12:16:19,310 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:16:19,310 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:16:19,310 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:16:19,310 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:16:19,310 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:16:19,310 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:16:19,310 [INFO] [device.py:send_certificate] Sent certificate length: 881
2025-06-08 12:16:19,310 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 12:16:19,310 [INFO] [device.py:send_certificate] Sent certificate
2025-06-08 12:16:19,310 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 12:16:19,310 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 12:16:19,310 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 12:16:19,310 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 12:16:19,310 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 12:16:19,310 [ERROR] [device.py:send_certificate] Failed to send certificate
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 46, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 6 bytes, expected 256 bytes.
2025-06-08 12:16:19,311 [ERROR] [device.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 123, in send_hello
    send_certificate(client_socket, "certificates/device_certificate.json")
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/device.py", line 50, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/device.py", line 46, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 6 bytes, expected 256 bytes.
2025-06-08 12:16:19,314 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 12:16:19,315 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 12:16:19,315 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 12:16:19,316 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 155, in <module>
    nonce_device = recv_exact(client, 16)
  File "/Users/omerfarukbulut/info_sec/server.py", line 32, in recv_exact
    packet = sock.recv(size - len(data))
ConnectionResetError: [Errno 54] Connection reset by peer
2025-06-08 12:16:19,317 [INFO] [server.py:<module>] Server shut down
2025-06-08 12:18:28,102 [INFO] [server.py:<module>] Server starting
2025-06-08 12:18:28,169 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:18:30,599 [INFO] [device.py:<module>] Device started
2025-06-08 12:18:30,666 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:18:30,666 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:18:30,666 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 56825)
2025-06-08 12:18:30,666 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:18:30,667 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:18:30,667 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:18:30,667 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:18:30,667 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:18:30,667 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:18:30,667 [INFO] [device.py:send_certificate] Sent certificate length: 881
2025-06-08 12:18:30,667 [INFO] [device.py:send_certificate] Sent certificate
2025-06-08 12:18:30,667 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 12:18:30,667 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 12:18:30,667 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 12:18:30,667 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 12:18:30,667 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 12:18:30,667 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 12:18:30,671 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 12:18:30,672 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 12:18:30,672 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 12:18:30,674 [INFO] [device.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 12:18:30,674 [INFO] [device.py:send_hello] Sent nonce: b'\xceY\xd99\xe7z%\x9b:7\xfb\xdb\xac|\xfb\x8b'
2025-06-08 12:18:30,674 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 12:18:30,674 [INFO] [server.py:<module>] Received nonce: b'\xceY\xd99\xe7z%\x9b:7\xfb\xdb\xac|\xfb\x8b'
2025-06-08 12:18:30,674 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 12:18:30,674 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 12:18:30,674 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:18:30,675 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 12:18:30,675 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 12:18:30,675 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:18:30,675 [INFO] [device.py:<module>] Device socket closed
2025-06-08 12:18:30,675 [INFO] [server.py:<module>] Received header: b'<ENDD>'
2025-06-08 12:18:30,675 [INFO] [server.py:<module>] Received end of file
2025-06-08 12:18:30,675 [INFO] [server.py:<module>] Server closed
2025-06-08 12:18:30,676 [INFO] [server.py:<module>] Server shut down
2025-06-08 12:27:21,572 [INFO] [server.py:<module>] Server starting
2025-06-08 12:27:21,640 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:27:23,850 [INFO] [device.py:<module>] Device started
2025-06-08 12:27:23,919 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:27:23,919 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:27:23,919 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 56915)
2025-06-08 12:27:23,919 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:27:23,919 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:27:23,919 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:27:23,919 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:27:23,919 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:27:23,919 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:27:23,919 [ERROR] [device.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 108, in send_hello
    send_certificate(client_socket, "certificates/device_certificate.json")
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: send_certificate() missing 1 required positional argument: 'private_key'
2025-06-08 12:27:23,923 [WARNING] [server.py:recv_exact] Connection interrupted during receive
2025-06-08 12:27:23,923 [INFO] [server.py:recv_exact] Received 0 bytes successfully
2025-06-08 12:27:23,923 [INFO] [server.py:recv_certificate] Length bytes (raw): 
2025-06-08 12:27:23,923 [INFO] [server.py:recv_certificate] Expecting certificate of 0 bytes
2025-06-08 12:27:23,923 [INFO] [server.py:recv_exact] Receiving exactly 0 bytes...
2025-06-08 12:27:23,923 [INFO] [server.py:recv_exact] Received 0 bytes successfully
2025-06-08 12:27:23,923 [ERROR] [server.py:recv_certificate] Failed to receive or validate certificate.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 50, in recv_certificate
    cert_bundle = json.loads(cert_data.decode())
  File "/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/decoder.py", line 345, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/decoder.py", line 363, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-06-08 12:27:23,925 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 146, in <module>
    if validate_certificate(certificate, ca_public_key):
       ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 49, in validate_certificate
    cert_data = cert_bundle["certificate"]
                ~~~~~~~~~~~^^^^^^^^^^^^^^^
TypeError: 'NoneType' object is not subscriptable
2025-06-08 12:27:23,925 [INFO] [server.py:<module>] Server shut down
2025-06-08 12:27:53,305 [INFO] [server.py:<module>] Server starting
2025-06-08 12:27:53,372 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:27:54,767 [INFO] [device.py:<module>] Device started
2025-06-08 12:27:54,835 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:27:54,835 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:27:54,835 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 56920)
2025-06-08 12:27:54,835 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:27:54,835 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:27:54,835 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:27:54,835 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:27:54,835 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:27:54,835 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:27:54,836 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:27:54,836 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 12:27:54,836 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:27:54,836 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 12:27:54,836 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 12:27:54,836 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 12:27:54,836 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 12:27:54,836 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 12:27:54,839 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 12:27:54,840 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 12:27:54,840 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 12:27:54,840 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:27:54,841 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:27:54,842 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 12:27:54,842 [INFO] [device.py:send_hello] Sent nonce: b'\x0f\xfd\x1f\xfe\x94\xe3^\xf6\xe3vs\xd5k\xae\x05.'
2025-06-08 12:27:54,842 [ERROR] [ca_cert.py:send_certificate] Failed to send certificate
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 16 bytes, expected 256 bytes.
2025-06-08 12:27:54,844 [ERROR] [server.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", server_public_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 16 bytes, expected 256 bytes.
2025-06-08 12:27:54,844 [ERROR] [device.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    decrypted = private_key.decrypt(
        encrypted_message,
    ...<4 lines>...
        )
    )
ValueError: Decryption failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 113, in send_hello
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 90, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: Decryption failed
2025-06-08 12:27:54,844 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 148, in <module>
    send_hello(client)
    ~~~~~~~~~~^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/server.py", line 81, in send_hello
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", server_public_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 16 bytes, expected 256 bytes.
2025-06-08 12:27:54,845 [INFO] [server.py:<module>] Server shut down
2025-06-08 12:29:45,020 [INFO] [server.py:<module>] Server starting
2025-06-08 12:29:45,088 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:29:46,931 [INFO] [device.py:<module>] Device started
2025-06-08 12:29:46,998 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:29:46,998 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:29:46,998 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 56934)
2025-06-08 12:29:46,998 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:29:46,998 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:29:46,999 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:29:46,999 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:29:46,999 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:29:46,999 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:29:47,000 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:29:47,000 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:29:47,000 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 12:29:47,000 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 12:29:47,000 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 12:29:47,000 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 12:29:47,000 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 12:29:47,000 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 12:29:47,002 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 12:29:47,004 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 12:29:47,004 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 12:29:47,004 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:29:47,005 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:29:47,005 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 12:29:47,005 [INFO] [device.py:send_hello] Sent nonce: b"&W\xdaK\xe0|N\x13\x89;Q'I)\xf0\xc4"
2025-06-08 12:29:47,005 [ERROR] [ca_cert.py:send_certificate] Failed to send certificate
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 16 bytes, expected 256 bytes.
2025-06-08 12:29:47,007 [ERROR] [server.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 16 bytes, expected 256 bytes.
2025-06-08 12:29:47,007 [ERROR] [device.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    decrypted = private_key.decrypt(
        encrypted_message,
    ...<4 lines>...
        )
    )
ValueError: Decryption failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 113, in send_hello
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 90, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: Decryption failed
2025-06-08 12:29:47,008 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 148, in <module>
    send_hello(client)
    ~~~~~~~~~~^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/server.py", line 81, in send_hello
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 16 bytes, expected 256 bytes.
2025-06-08 12:29:47,008 [INFO] [server.py:<module>] Server shut down
2025-06-08 12:30:01,950 [INFO] [server.py:<module>] Server starting
2025-06-08 12:30:02,017 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:30:03,616 [INFO] [device.py:<module>] Device started
2025-06-08 12:30:03,683 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:30:03,683 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:30:03,683 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 56935)
2025-06-08 12:30:03,683 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:30:03,683 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:30:03,683 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:30:03,683 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:30:03,683 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:30:03,683 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:30:03,684 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:30:03,684 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 12:30:03,684 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:30:03,684 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 12:30:03,684 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 12:30:03,684 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 12:30:03,684 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 12:30:03,684 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 12:30:03,687 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 12:30:03,689 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 12:30:03,689 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 12:30:03,689 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 12:30:03,690 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 12:30:03,690 [INFO] [device.py:send_hello] Sent nonce: b'\xf47z\xc0E\xf5\xcf!]\xc4T\xf0v)4s'
2025-06-08 12:30:03,690 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 12:30:03,690 [INFO] [server.py:<module>] Received nonce: b'\xf47z\xc0E\xf5\xcf!]\xc4T\xf0v)4s'
2025-06-08 12:30:03,691 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 12:30:03,691 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:30:03,690 [ERROR] [device.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 113, in send_hello
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 6 bytes, expected 256 bytes.
2025-06-08 12:30:03,695 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 87, in <module>
    header = recv_exact(client, 6)
  File "/Users/omerfarukbulut/info_sec/server.py", line 32, in recv_exact
    packet = sock.recv(size - len(data))
ConnectionResetError: [Errno 54] Connection reset by peer
2025-06-08 12:30:03,696 [INFO] [server.py:<module>] Server shut down
2025-06-08 12:31:07,991 [INFO] [server.py:<module>] Server starting
2025-06-08 12:31:08,059 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:31:09,635 [INFO] [device.py:<module>] Device started
2025-06-08 12:31:09,702 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:31:09,702 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:31:09,702 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 56944)
2025-06-08 12:31:09,702 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:31:09,702 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:31:09,702 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:31:09,702 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:31:09,702 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:31:09,702 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:31:09,702 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:31:09,702 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 12:31:09,702 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:31:09,702 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 12:31:09,702 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 12:31:09,702 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 12:31:09,702 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 12:31:09,702 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 12:31:09,706 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 12:31:09,707 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 12:31:09,707 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 12:31:09,709 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 12:31:09,709 [INFO] [device.py:send_hello] Sent nonce: b'\x90\\\xf8\x9a\xc4\xe3\xfb\x87\x9623\x82(\xde\x1f-'
2025-06-08 12:31:09,709 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 12:31:09,709 [INFO] [server.py:<module>] Received nonce: b'\x90\\\xf8\x9a\xc4\xe3\xfb\x87\x9623\x82(\xde\x1f-'
2025-06-08 12:31:09,709 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 12:31:09,709 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 12:31:09,709 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:31:09,710 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 12:31:09,710 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 12:31:09,710 [INFO] [device.py:<module>] Device socket closed
2025-06-08 12:31:09,710 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:31:09,710 [INFO] [server.py:<module>] Received header: b'<ENDD>'
2025-06-08 12:31:09,710 [INFO] [server.py:<module>] Received end of file
2025-06-08 12:31:09,710 [INFO] [server.py:<module>] Server closed
2025-06-08 12:31:09,710 [INFO] [server.py:<module>] Server shut down
2025-06-08 12:34:07,420 [INFO] [server.py:<module>] Server starting
2025-06-08 12:34:07,489 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:34:09,668 [INFO] [device.py:<module>] Device started
2025-06-08 12:34:09,735 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:34:09,736 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:34:09,736 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 56968)
2025-06-08 12:34:09,736 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:34:09,736 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:34:09,736 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:34:09,736 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:34:09,736 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:34:09,736 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:34:09,737 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:34:09,737 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:34:09,737 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 12:34:09,737 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 12:34:09,737 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 12:34:09,737 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 12:34:09,737 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 12:34:09,737 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 12:34:09,740 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 12:34:09,741 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 12:34:09,741 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 12:34:09,742 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 12:34:09,743 [INFO] [device.py:send_hello] Sent nonce: b'H\xef\x9a\xd9no%\xd4\xd2@lPD\x88\xa0j'
2025-06-08 12:34:09,743 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 12:34:09,743 [INFO] [server.py:<module>] Received nonce: b'H\xef\x9a\xd9no%\xd4\xd2@lPD\x88\xa0j'
2025-06-08 12:34:09,743 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 12:34:09,743 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 12:34:09,743 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:34:09,743 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:34:09,744 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 12:34:09,744 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 12:34:09,744 [INFO] [device.py:<module>] Device socket closed
2025-06-08 12:34:09,744 [ERROR] [ca_cert.py:send_certificate] Failed to send certificate
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 6 bytes, expected 256 bytes.
2025-06-08 12:34:09,745 [ERROR] [server.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 6 bytes, expected 256 bytes.
2025-06-08 12:34:09,746 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 163, in <module>
    send_hello(client)
    ~~~~~~~~~~^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/server.py", line 81, in send_hello
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 6 bytes, expected 256 bytes.
2025-06-08 12:34:09,746 [INFO] [server.py:<module>] Server shut down
2025-06-08 12:48:49,527 [INFO] [server.py:<module>] Server starting
2025-06-08 12:48:49,594 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:48:50,919 [INFO] [device.py:<module>] Device started
2025-06-08 12:48:50,986 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:48:50,986 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 58464)
2025-06-08 12:48:50,986 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:48:50,986 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:48:50,986 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:48:50,987 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:48:50,987 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:48:50,987 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:48:50,987 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:48:50,987 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:48:50,987 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:48:50,987 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 12:48:50,987 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 12:48:50,987 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 12:48:50,987 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 12:48:50,987 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 12:48:50,987 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 12:48:50,989 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 12:48:50,989 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 12:48:50,990 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 12:48:50,992 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 12:48:50,992 [INFO] [device.py:send_hello] Sent nonce: b'\xec\xaf\x05\x8ciQ!\x10\xa2h\xc8e\x03\xe0\x81\x80'
2025-06-08 12:48:50,992 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 12:48:50,992 [INFO] [server.py:<module>] Received nonce: b'\xec\xaf\x05\x8ciQ!\x10\xa2h\xc8e\x03\xe0\x81\x80'
2025-06-08 12:48:50,992 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 12:48:50,992 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 12:48:50,992 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:48:50,992 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:48:50,993 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 12:48:50,993 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 12:48:50,993 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 12:48:50,993 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 12:48:50,993 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 12:48:50,993 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 12:48:50,993 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 12:51:50,054 [INFO] [server.py:<module>] Server shut down
2025-06-08 12:51:50,054 [INFO] [device.py:recv_hello] Received nonce: b''
2025-06-08 12:51:50,056 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 12:51:50,057 [ERROR] [device.py:send_end_of_file] Failed to send end of file
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 97, in send_end_of_file
    client_socket.sendall(b"<ENDD>")
    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
BrokenPipeError: [Errno 32] Broken pipe
2025-06-08 12:51:52,003 [INFO] [server.py:<module>] Server starting
2025-06-08 12:51:52,070 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:51:54,248 [INFO] [device.py:<module>] Device started
2025-06-08 12:51:54,318 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:51:54,318 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 58490)
2025-06-08 12:51:54,318 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:51:54,318 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:51:54,318 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:51:54,318 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:51:54,318 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:51:54,318 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:51:54,318 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:51:54,319 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:51:54,319 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:51:54,319 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 12:51:54,319 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 12:51:54,319 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 12:51:54,319 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 12:51:54,319 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 12:51:54,319 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 12:51:54,320 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 12:51:54,320 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 12:51:54,320 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 12:51:54,322 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 12:51:54,322 [INFO] [device.py:send_hello] Sent nonce: b'\x929\xf5\xd0\xd3\x1cx\x86s\xfd\xe6\x91(\x1f\xc7\xa7'
2025-06-08 12:51:54,323 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 12:51:54,323 [INFO] [server.py:<module>] Received nonce: b'\x929\xf5\xd0\xd3\x1cx\x86s\xfd\xe6\x91(\x1f\xc7\xa7'
2025-06-08 12:51:54,323 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 12:51:54,323 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 12:51:54,323 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:51:54,323 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:51:54,324 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 12:51:54,324 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 12:51:54,324 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 12:51:54,324 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 12:51:54,324 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 12:51:54,325 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 12:51:54,325 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 12:52:00,047 [ERROR] [ca_cert.py:send_certificate] Failed to send certificate
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 12:52:00,049 [ERROR] [server.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 12:52:00,050 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 169, in <module>
    send_hello(client)
    ~~~~~~~~~~^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/server.py", line 87, in send_hello
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 12:52:00,052 [INFO] [server.py:<module>] Server shut down
2025-06-08 12:52:02,724 [INFO] [server.py:<module>] Server starting
2025-06-08 12:52:02,790 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:52:04,049 [INFO] [device.py:<module>] Device started
2025-06-08 12:52:04,116 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:52:04,116 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:52:04,116 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 58498)
2025-06-08 12:52:04,116 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:52:04,116 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:52:04,116 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:52:04,116 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:52:04,116 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:52:04,116 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:52:04,116 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:52:04,116 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:52:04,116 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 12:52:04,116 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 12:52:04,116 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 12:52:04,116 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 12:52:04,116 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 12:52:04,116 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 12:52:04,117 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 12:52:04,117 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 12:52:04,117 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 12:52:04,120 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 12:52:04,120 [INFO] [device.py:send_hello] Sent nonce: b'\xc0x(\x90tTM\x00\xdd\xdfnc\xf9a\xd4\xf6'
2025-06-08 12:52:04,120 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 12:52:04,120 [INFO] [server.py:<module>] Received nonce: b'\xc0x(\x90tTM\x00\xdd\xdfnc\xf9a\xd4\xf6'
2025-06-08 12:52:04,120 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 12:52:04,120 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 12:52:04,120 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:52:04,120 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:52:04,121 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 12:52:04,121 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 12:52:04,121 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 12:52:04,121 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 12:52:04,121 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 12:52:04,121 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 12:52:04,122 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 12:52:04,122 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 12:52:04,125 [ERROR] [ca_cert.py:send_certificate] Failed to send certificate
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    decrypted = private_key.decrypt(
        encrypted_message,
    ...<4 lines>...
        )
    )
ValueError: Decryption failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 90, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: Decryption failed
2025-06-08 12:52:04,125 [ERROR] [server.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    decrypted = private_key.decrypt(
        encrypted_message,
    ...<4 lines>...
        )
    )
ValueError: Decryption failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 90, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: Decryption failed
2025-06-08 12:52:04,126 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    decrypted = private_key.decrypt(
        encrypted_message,
    ...<4 lines>...
        )
    )
ValueError: Decryption failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 169, in <module>
    send_hello(client)
    ~~~~~~~~~~^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/server.py", line 87, in send_hello
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 90, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: Decryption failed
2025-06-08 12:52:04,126 [INFO] [server.py:<module>] Server shut down
2025-06-08 12:52:04,127 [INFO] [device.py:recv_hello] Received nonce: b''
2025-06-08 12:52:04,127 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 12:52:04,127 [ERROR] [device.py:send_end_of_file] Failed to send end of file
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 97, in send_end_of_file
    client_socket.sendall(b"<ENDD>")
    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
BrokenPipeError: [Errno 32] Broken pipe
2025-06-08 12:54:13,839 [INFO] [server.py:<module>] Server starting
2025-06-08 12:54:13,907 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:54:16,735 [INFO] [device.py:<module>] Device started
2025-06-08 12:54:16,802 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:54:16,803 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:54:16,802 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 58507)
2025-06-08 12:54:16,803 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:54:16,803 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:54:16,803 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:54:16,803 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:54:16,803 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:54:16,803 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:54:16,803 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:54:16,803 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 12:54:16,803 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:54:16,803 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 12:54:16,803 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 12:54:16,803 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 12:54:16,804 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 12:54:16,804 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 12:54:16,805 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 12:54:16,806 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 12:54:16,806 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 12:54:16,808 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 12:54:16,808 [INFO] [device.py:send_hello] Sent nonce: b'J\xaf\x8b\xac\xd0\xfd\xdc\x01\xa8U\xf1\xb3[\x06\x13\xb3'
2025-06-08 12:54:16,808 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 12:54:16,808 [INFO] [server.py:<module>] Received nonce: b'J\xaf\x8b\xac\xd0\xfd\xdc\x01\xa8U\xf1\xb3[\x06\x13\xb3'
2025-06-08 12:54:16,808 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 12:54:16,808 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 12:54:16,808 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:54:16,808 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:54:16,809 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 12:54:16,809 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 12:54:16,809 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 12:54:16,809 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 12:54:16,809 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 12:54:16,809 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 12:54:16,810 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 12:54:16,810 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 12:54:16,812 [ERROR] [ca_cert.py:send_certificate] Failed to send certificate
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    decrypted = private_key.decrypt(
        encrypted_message,
    ...<4 lines>...
        )
    )
ValueError: Decryption failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 90, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: Decryption failed
2025-06-08 12:54:16,813 [ERROR] [server.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    decrypted = private_key.decrypt(
        encrypted_message,
    ...<4 lines>...
        )
    )
ValueError: Decryption failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 90, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: Decryption failed
2025-06-08 12:54:16,814 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    decrypted = private_key.decrypt(
        encrypted_message,
    ...<4 lines>...
        )
    )
ValueError: Decryption failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 169, in <module>
    send_hello(client)
    ~~~~~~~~~~^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/server.py", line 87, in send_hello
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 90, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: Decryption failed
2025-06-08 12:54:16,816 [INFO] [server.py:<module>] Server shut down
2025-06-08 12:54:16,816 [INFO] [device.py:recv_hello] Received nonce: b''
2025-06-08 12:54:16,816 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 12:54:16,816 [ERROR] [device.py:send_end_of_file] Failed to send end of file
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 97, in send_end_of_file
    client_socket.sendall(b"<ENDD>")
    ~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^
BrokenPipeError: [Errno 32] Broken pipe
2025-06-08 12:58:59,994 [INFO] [server.py:<module>] Server starting
2025-06-08 12:59:00,061 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 12:59:02,811 [INFO] [device.py:<module>] Device started
2025-06-08 12:59:02,878 [INFO] [device.py:<module>] Connected to server
2025-06-08 12:59:02,878 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 12:59:02,878 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 58542)
2025-06-08 12:59:02,878 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 12:59:02,878 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 12:59:02,878 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 12:59:02,878 [INFO] [server.py:<module>] Expecting hello
2025-06-08 12:59:02,878 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 12:59:02,878 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 12:59:02,879 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:59:02,879 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:59:02,879 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 12:59:02,879 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 12:59:02,879 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 12:59:02,879 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 12:59:02,879 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 12:59:02,879 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 12:59:02,881 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 12:59:02,882 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 12:59:02,882 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 12:59:02,884 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 12:59:02,884 [INFO] [device.py:send_hello] Sent nonce: b'S \\\x1c\xf1\xcd\xe3\x91L\x0bx\x8e\x95J\xe1\xbf'
2025-06-08 12:59:02,884 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 12:59:02,884 [INFO] [server.py:<module>] Received nonce: b'S \\\x1c\xf1\xcd\xe3\x91L\x0bx\x8e\x95J\xe1\xbf'
2025-06-08 12:59:02,884 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 12:59:02,884 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 12:59:02,884 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 12:59:02,884 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 12:59:02,885 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 12:59:02,885 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 12:59:02,885 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 12:59:02,885 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 12:59:02,885 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 12:59:02,885 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 12:59:02,886 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 12:59:02,886 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 12:59:02,888 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 12:59:02,888 [INFO] [server.py:send_hello] Sent nonce: b'X$Z\xb8C(\x0e_u\x0f\x88\xafuR\xadn'
2025-06-08 12:59:02,888 [INFO] [device.py:recv_hello] Received nonce: b'X$Z\xb8C(\x0e_u\x0f\x88\xafuR\xadn'
2025-06-08 12:59:02,889 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 12:59:02,889 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 12:59:02,889 [INFO] [device.py:<module>] Device socket closed
2025-06-08 12:59:02,890 [ERROR] [server.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 88, in decrypt_message
    return decrypted.decode()
           ~~~~~~~~~~~~~~~~^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb8 in position 3: invalid start byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 82, in send_hello
    ack_msg = decrypt_message(ack, server_private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 90, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: 'utf-8' codec can't decode byte 0xb8 in position 3: invalid start byte
2025-06-08 12:59:02,891 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 88, in decrypt_message
    return decrypted.decode()
           ~~~~~~~~~~~~~~~~^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb8 in position 3: invalid start byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 169, in <module>
    send_hello(client)
    ~~~~~~~~~~^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/server.py", line 87, in send_hello
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 82, in send_hello
    ack_msg = decrypt_message(ack, server_private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 90, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: 'utf-8' codec can't decode byte 0xb8 in position 3: invalid start byte
2025-06-08 12:59:02,892 [INFO] [server.py:<module>] Server shut down
2025-06-08 13:18:14,859 [INFO] [server.py:<module>] Server starting
2025-06-08 13:18:14,927 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 13:18:16,668 [INFO] [device.py:<module>] Device started
2025-06-08 13:18:16,737 [INFO] [device.py:<module>] Connected to server
2025-06-08 13:18:16,737 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 13:18:16,737 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 58705)
2025-06-08 13:18:16,737 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:18:16,737 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 13:18:16,737 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 13:18:16,737 [INFO] [server.py:<module>] Expecting hello
2025-06-08 13:18:16,737 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 13:18:16,738 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 13:18:16,738 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 13:18:16,738 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 13:18:16,738 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 13:18:16,738 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 13:18:16,738 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 13:18:16,738 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 13:18:16,738 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 13:18:16,738 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 13:18:16,739 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 13:18:16,740 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 13:18:16,740 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 13:18:16,742 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 13:18:16,742 [INFO] [device.py:send_hello] Sent nonce: b'II\xbe\x19S\xc4\xde\xa7f\x9e\x83\xca\x92\x07\xf5\xbd'
2025-06-08 13:18:16,742 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 13:18:16,742 [INFO] [server.py:<module>] Received nonce: b'II\xbe\x19S\xc4\xde\xa7f\x9e\x83\xca\x92\x07\xf5\xbd'
2025-06-08 13:18:16,742 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 13:18:16,742 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 13:18:16,743 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 13:18:16,743 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 13:18:16,744 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 13:18:16,744 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 13:18:16,744 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 13:18:16,744 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 13:18:16,744 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 13:18:16,744 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 13:18:16,744 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 13:18:16,744 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 13:18:16,746 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 13:18:16,746 [INFO] [server.py:send_hello] Sent nonce: b'e\x9fo\\\xf1c\x03\xe3\xd2\xacC&\xd1<\xd0r'
2025-06-08 13:18:16,746 [INFO] [device.py:recv_hello] Received nonce: b'e\x9fo\\\xf1c\x03\xe3\xd2\xacC&\xd1<\xd0r'
2025-06-08 13:18:16,747 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 13:18:16,747 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 13:18:16,747 [INFO] [device.py:<module>] Device socket closed
2025-06-08 13:18:16,748 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 13:18:16,748 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:18:16,748 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 13:18:16,748 [INFO] [server.py:<module>] Received header: b'<ENDD>'
2025-06-08 13:18:16,748 [INFO] [server.py:<module>] Received end of file
2025-06-08 13:18:16,749 [INFO] [server.py:<module>] Server closed
2025-06-08 13:18:16,749 [INFO] [server.py:<module>] Server shut down
2025-06-08 13:35:47,269 [INFO] [server.py:<module>] Server starting
2025-06-08 13:35:47,337 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 13:35:50,231 [INFO] [device.py:<module>] Device started
2025-06-08 13:35:50,298 [INFO] [device.py:<module>] Connected to server
2025-06-08 13:35:50,298 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 58920)
2025-06-08 13:35:50,298 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:35:50,302 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 13:35:50,302 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 13:35:50,302 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 13:35:50,302 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 13:35:50,302 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 13:35:50,302 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 13:35:50,305 [ERROR] [server.py:<module>] Failed to receive pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 89, in decrypt_message
    return decrypted.decode()
           ~~~~~~~~~~~~~~~~^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xbb in position 0: invalid start byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 175, in <module>
    pre_master_secret = decrypt_message(encrypted_pre_master_secret, server_private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 91, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: 'utf-8' codec can't decode byte 0xbb in position 0: invalid start byte
2025-06-08 13:35:50,306 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 89, in decrypt_message
    return decrypted.decode()
           ~~~~~~~~~~~~~~~~^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xbb in position 0: invalid start byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 182, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 175, in <module>
    pre_master_secret = decrypt_message(encrypted_pre_master_secret, server_private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 91, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: 'utf-8' codec can't decode byte 0xbb in position 0: invalid start byte
2025-06-08 13:35:50,306 [INFO] [server.py:<module>] Server shut down
2025-06-08 13:35:50,306 [ERROR] [device.py:send_pre_master_secret] Failed to send pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 168, in send_pre_master_secret
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 77, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 13:40:50,937 [INFO] [server.py:<module>] Server starting
2025-06-08 13:40:51,005 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 13:40:52,732 [INFO] [device.py:<module>] Device started
2025-06-08 13:40:52,799 [INFO] [device.py:<module>] Connected to server
2025-06-08 13:40:52,799 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 58977)
2025-06-08 13:40:52,799 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:40:52,801 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 13:40:52,801 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 13:40:52,801 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 13:40:52,801 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 13:40:52,801 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 13:40:52,801 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 13:40:52,804 [ERROR] [server.py:<module>] Failed to receive pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 89, in decrypt_message
    return decrypted.decode()
           ~~~~~~~~~~~~~~~~^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xd1 in position 0: invalid continuation byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 175, in <module>
    pre_master_secret = decrypt_message(encrypted_pre_master_secret, server_private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 91, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: 'utf-8' codec can't decode byte 0xd1 in position 0: invalid continuation byte
2025-06-08 13:40:52,805 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 89, in decrypt_message
    return decrypted.decode()
           ~~~~~~~~~~~~~~~~^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xd1 in position 0: invalid continuation byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 182, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 175, in <module>
    pre_master_secret = decrypt_message(encrypted_pre_master_secret, server_private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 91, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: 'utf-8' codec can't decode byte 0xd1 in position 0: invalid continuation byte
2025-06-08 13:40:52,806 [INFO] [server.py:<module>] Server shut down
2025-06-08 13:40:52,806 [ERROR] [device.py:send_pre_master_secret] Failed to send pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 168, in send_pre_master_secret
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 77, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 13:43:45,737 [INFO] [server.py:<module>] Server starting
2025-06-08 13:43:45,805 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 13:43:47,463 [INFO] [device.py:<module>] Device started
2025-06-08 13:43:47,532 [INFO] [device.py:<module>] Connected to server
2025-06-08 13:43:47,532 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59000)
2025-06-08 13:43:47,532 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:43:47,535 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 13:43:47,535 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 13:43:47,535 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 13:43:47,536 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 13:43:47,536 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 13:43:47,536 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 13:43:47,539 [ERROR] [server.py:<module>] Failed to receive pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 89, in decrypt_message
    return decrypted.decode()
           ~~~~~~~~~~~~~~~~^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 3: invalid start byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 175, in <module>
    pre_master_secret = decrypt_message(encrypted_pre_master_secret, server_private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 91, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: 'utf-8' codec can't decode byte 0x80 in position 3: invalid start byte
2025-06-08 13:43:47,540 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 89, in decrypt_message
    return decrypted.decode()
           ~~~~~~~~~~~~~~~~^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 3: invalid start byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 182, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 175, in <module>
    pre_master_secret = decrypt_message(encrypted_pre_master_secret, server_private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 91, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: 'utf-8' codec can't decode byte 0x80 in position 3: invalid start byte
2025-06-08 13:43:47,541 [INFO] [server.py:<module>] Server shut down
2025-06-08 13:43:47,541 [ERROR] [device.py:send_pre_master_secret] Failed to send pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 168, in send_pre_master_secret
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 77, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 13:44:48,890 [INFO] [server.py:<module>] Server starting
2025-06-08 13:44:49,012 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 13:44:50,596 [INFO] [device.py:<module>] Device started
2025-06-08 13:44:50,663 [INFO] [device.py:<module>] Connected to server
2025-06-08 13:44:50,663 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59018)
2025-06-08 13:44:50,664 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:44:50,666 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 13:44:50,667 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 13:44:50,667 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 13:44:50,667 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 13:44:50,667 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 13:44:50,667 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 13:44:50,669 [ERROR] [server.py:<module>] Failed to receive pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 89, in decrypt_message
    return decrypted.decode()
           ~~~~~~~~~~~~~~~~^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc8 in position 3: invalid continuation byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 175, in <module>
    pre_master_secret = decrypt_message(encrypted_pre_master_secret, server_private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 91, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: 'utf-8' codec can't decode byte 0xc8 in position 3: invalid continuation byte
2025-06-08 13:44:50,671 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 89, in decrypt_message
    return decrypted.decode()
           ~~~~~~~~~~~~~~~~^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xc8 in position 3: invalid continuation byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 182, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 175, in <module>
    pre_master_secret = decrypt_message(encrypted_pre_master_secret, server_private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 91, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: 'utf-8' codec can't decode byte 0xc8 in position 3: invalid continuation byte
2025-06-08 13:44:50,671 [INFO] [server.py:<module>] Server shut down
2025-06-08 13:44:50,671 [INFO] [device.py:send_pre_master_secret] Received acknowledgement: b''
2025-06-08 13:44:50,672 [ERROR] [device.py:send_pre_master_secret] Failed to send pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 169, in send_pre_master_secret
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 77, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 13:47:45,032 [INFO] [server.py:<module>] Server starting
2025-06-08 13:47:45,099 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 13:47:46,667 [INFO] [device.py:<module>] Device started
2025-06-08 13:47:46,735 [INFO] [device.py:<module>] Connected to server
2025-06-08 13:47:46,735 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59042)
2025-06-08 13:47:46,735 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:47:46,739 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 13:47:46,739 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 13:47:46,739 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 13:47:46,739 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 13:47:46,739 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 13:47:46,739 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 13:47:46,742 [ERROR] [server.py:<module>] Failed to receive pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 86, in decrypt_message
    return decrypted.decode() if decode else decrypted
           ~~~~~~~~~~~~~~~~^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xce in position 0: invalid continuation byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 175, in <module>
    pre_master_secret = decrypt_message(encrypted_pre_master_secret, server_private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 88, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: 'utf-8' codec can't decode byte 0xce in position 0: invalid continuation byte
2025-06-08 13:47:46,743 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 86, in decrypt_message
    return decrypted.decode() if decode else decrypted
           ~~~~~~~~~~~~~~~~^^
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xce in position 0: invalid continuation byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 182, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 175, in <module>
    pre_master_secret = decrypt_message(encrypted_pre_master_secret, server_private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 88, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: 'utf-8' codec can't decode byte 0xce in position 0: invalid continuation byte
2025-06-08 13:47:46,743 [INFO] [server.py:<module>] Server shut down
2025-06-08 13:47:46,744 [INFO] [device.py:send_pre_master_secret] Received acknowledgement: b''
2025-06-08 13:47:46,744 [ERROR] [device.py:send_pre_master_secret] Failed to send pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 169, in send_pre_master_secret
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 75, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 13:48:07,790 [INFO] [server.py:<module>] Server starting
2025-06-08 13:48:11,694 [INFO] [server.py:<module>] Server starting
2025-06-08 13:48:17,543 [INFO] [server.py:<module>] Server starting
2025-06-08 13:48:17,609 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 13:48:20,196 [INFO] [device.py:<module>] Device started
2025-06-08 13:48:20,263 [INFO] [device.py:<module>] Connected to server
2025-06-08 13:48:20,263 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59045)
2025-06-08 13:48:20,264 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:48:20,267 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 13:48:20,267 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 13:48:20,267 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 13:48:20,267 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 13:48:20,267 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 13:48:20,267 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 13:48:20,270 [INFO] [server.py:<module>] Received pre-master secret: b'I&t\xa5pV\x8a3\x9b\x1b\xae>mc\xdfB!Ez\xbc\xf7\x85\xa9\x9a1C`Z\x0c(\xb4\x1b'
2025-06-08 13:48:20,270 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 13:48:20,270 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:48:20,270 [INFO] [device.py:send_pre_master_secret] Received acknowledgement: b'\x8d\x0bg\x85\x1c,\x19\xff\x8c\xaa\xf0\xb2\x010<\xf9\x17\x12\xd9\xa9\x96\x1bK\xdbFl\xaa\x86\x98-\xfb\x03\xedd\xdd\x87\x01\x05\xeb\x12q\xf1\xc9{\xb9\x96\xafM\x06\xd0\x9d\xd5E\x8a\x87\'O\x9d+;\xa7\x82\xeb#\xf2j72\x7f\xf1\xef\x1aF\xf7\x18\x0c\xc2\xcd\xe5\x1d(A\xa1\xca\xb7\xe7\xf9\xbbVT\xe0\xd1\x07\x17\xaazW\xae"\xc9\x88\x0bj\xf6\xfe\xdaDei\tf\xea\xd5P\xbe\xb9J\x91x`\x0bV(\xfd\x8e\x9c\x1d|!\x8c\x9aeF\xfd\nu\xc1\x03\x1bYV.\x91\x1b\x04\x1d\xd0\xa0\xe4\xd9\x83/\xfd\xff\x7f\xb8\ri\xe7d/X6Vt\xc1\xda\x93\x0b\xc4\xf3\xf4":g9$8\xfd\xec\xf2vK\n\x814\x1c\x07p\x0cc\xed\xca\xe6\xbam\xf1Y$I\x8d\x85\xef\x1fV\n\x9e\x99\xbf\x92N.E\xd0H\x8fJ\xc3\xd8e<\x0c@\xed\xfe"\xdfLN\xd1\x91\x97\xf7 Q\xb9\xccGW\xce\xf1$\xb7yg\r/\x8aL\xeew\xcd\xc0W\x84\x95'
2025-06-08 13:48:20,273 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 13:48:20,273 [INFO] [device.py:<module>] Device socket closed
2025-06-08 13:48:20,273 [WARNING] [server.py:recv_exact] Connection interrupted during receive
2025-06-08 13:48:20,273 [INFO] [server.py:recv_exact] Received 0 bytes successfully
2025-06-08 13:48:20,273 [INFO] [server.py:<module>] Received header: b''
2025-06-08 13:48:20,273 [ERROR] [server.py:<module>] Invalid header received
2025-06-08 13:48:20,273 [INFO] [server.py:<module>] Server shut down
2025-06-08 13:49:05,663 [INFO] [server.py:<module>] Server starting
2025-06-08 13:49:05,731 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 13:49:07,322 [INFO] [device.py:<module>] Device started
2025-06-08 13:49:07,389 [INFO] [device.py:<module>] Connected to server
2025-06-08 13:49:07,390 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59054)
2025-06-08 13:49:07,390 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:49:07,393 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 13:49:07,393 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 13:49:07,393 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 13:49:07,393 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 13:49:07,393 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 13:49:07,393 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 13:49:07,396 [INFO] [server.py:<module>] Received pre-master secret: b'\xb2e\xeb\xcdg/\xc2\xddM\\\xc3\xe6\x04\x0fbL\xd3\xe6\xee\xb4\x97$\t\xbb\x88\xa9\x1f\xa6\xec\x85%\xce'
2025-06-08 13:49:07,396 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 13:49:07,396 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:49:07,399 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 13:49:07,399 [INFO] [device.py:<module>] Device socket closed
2025-06-08 13:49:07,399 [WARNING] [server.py:recv_exact] Connection interrupted during receive
2025-06-08 13:49:07,399 [INFO] [server.py:recv_exact] Received 0 bytes successfully
2025-06-08 13:49:07,399 [INFO] [server.py:<module>] Received header: b''
2025-06-08 13:49:07,399 [ERROR] [server.py:<module>] Invalid header received
2025-06-08 13:49:07,399 [INFO] [server.py:<module>] Server shut down
2025-06-08 13:49:21,813 [INFO] [device.py:<module>] Device started
2025-06-08 13:49:21,880 [ERROR] [device.py:<module>] Failed to connect to server
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 18, in <module>
    client.connect(("localhost", 9999))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^
ConnectionRefusedError: [Errno 61] Connection refused
2025-06-08 13:49:23,432 [INFO] [server.py:<module>] Server starting
2025-06-08 13:49:23,501 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 13:49:25,135 [INFO] [device.py:<module>] Device started
2025-06-08 13:49:25,202 [INFO] [device.py:<module>] Connected to server
2025-06-08 13:49:25,202 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59062)
2025-06-08 13:49:25,203 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:49:25,205 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 13:49:25,205 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 13:49:25,205 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 13:49:25,205 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 13:49:25,205 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 13:49:25,205 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 13:49:25,207 [INFO] [server.py:<module>] Received pre-master secret: b']rLJg\xc3\xa7\xe4e\x84.\xbe\xd6X\xf1%\xd6u\x08P#\xbb\x06\x7fB\xe3i>N\xcb\x1a\x81'
2025-06-08 13:49:25,208 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 13:49:25,208 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 13:49:25,210 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 13:49:25,210 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 13:49:25,211 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 13:49:25,211 [INFO] [server.py:<module>] Received header: b'<ENDD>'
2025-06-08 13:49:25,211 [INFO] [device.py:<module>] Device socket closed
2025-06-08 13:49:25,211 [INFO] [server.py:<module>] Received end of file
2025-06-08 13:49:25,211 [INFO] [server.py:<module>] Server closed
2025-06-08 13:49:25,211 [INFO] [server.py:<module>] Server shut down
2025-06-08 14:24:03,610 [INFO] [server.py:<module>] Server starting
2025-06-08 14:24:03,679 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 14:24:05,534 [INFO] [device.py:<module>] Device started
2025-06-08 14:24:05,601 [INFO] [device.py:<module>] Connected to server
2025-06-08 14:24:05,601 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 14:24:05,601 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59358)
2025-06-08 14:24:05,601 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:24:05,601 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:24:05,601 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 14:24:05,601 [INFO] [server.py:<module>] Expecting hello
2025-06-08 14:24:05,601 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 14:24:05,601 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 14:24:05,602 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:24:05,602 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 14:24:05,602 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:24:05,602 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 14:24:05,602 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 14:24:05,602 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 14:24:05,602 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 14:24:05,602 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 14:24:05,605 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 14:24:05,606 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 14:24:05,606 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 14:24:05,607 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:24:05,608 [INFO] [device.py:send_hello] Sent nonce: b'\xbfI\xf6I\x08\x83\xc3\x19[8\xa2gg]A\xd2'
2025-06-08 14:24:05,608 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 14:24:05,608 [INFO] [server.py:<module>] Received nonce: b'\xbfI\xf6I\x08\x83\xc3\x19[8\xa2gg]A\xd2'
2025-06-08 14:24:05,608 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:24:05,608 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 14:24:05,608 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:24:05,609 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:24:05,609 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 14:24:05,610 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 14:24:05,610 [ERROR] [ca_cert.py:send_certificate] Failed to send certificate
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 6 bytes, expected 256 bytes.
2025-06-08 14:24:05,611 [ERROR] [server.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 6 bytes, expected 256 bytes.
2025-06-08 14:24:05,611 [ERROR] [device.py:send_pre_master_secret] Failed to send pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 79, in decrypt_message
    decrypted = private_key.decrypt(
        encrypted_message,
    ...<4 lines>...
        )
    )
ValueError: Decryption failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 171, in send_pre_master_secret
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 89, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: Decryption failed
2025-06-08 14:24:05,611 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 169, in <module>
    send_hello(client)
    ~~~~~~~~~~^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/server.py", line 87, in send_hello
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 6 bytes, expected 256 bytes.
2025-06-08 14:24:05,612 [INFO] [server.py:<module>] Server shut down
2025-06-08 14:24:05,611 [ERROR] [device.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 79, in decrypt_message
    decrypted = private_key.decrypt(
        encrypted_message,
    ...<4 lines>...
        )
    )
ValueError: Decryption failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 118, in send_hello
    pre_master_secret = send_pre_master_secret(client_socket, server_public_key)
  File "/Users/omerfarukbulut/info_sec/device.py", line 176, in send_pre_master_secret
    raise e
  File "/Users/omerfarukbulut/info_sec/device.py", line 171, in send_pre_master_secret
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 89, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: Decryption failed
2025-06-08 14:26:33,593 [INFO] [server.py:<module>] Server starting
2025-06-08 14:26:33,661 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 14:26:35,176 [INFO] [device.py:<module>] Device started
2025-06-08 14:26:35,243 [INFO] [device.py:<module>] Connected to server
2025-06-08 14:26:35,243 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 14:26:35,243 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59384)
2025-06-08 14:26:35,243 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:26:35,243 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:26:35,243 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 14:26:35,243 [INFO] [server.py:<module>] Expecting hello
2025-06-08 14:26:35,244 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 14:26:35,244 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 14:26:35,244 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:26:35,245 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:26:35,245 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 14:26:35,245 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 14:26:35,245 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 14:26:35,245 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 14:26:35,245 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 14:26:35,245 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 14:26:35,248 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 14:26:35,249 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 14:26:35,249 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 14:26:35,251 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:26:35,251 [INFO] [device.py:send_hello] Sent nonce: b'\x96{ \x0f\xf6 V\xdc=}#\xf5\xd6\xf7m\x1a'
2025-06-08 14:26:35,251 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 14:26:35,251 [INFO] [server.py:<module>] Received nonce: b'\x96{ \x0f\xf6 V\xdc=}#\xf5\xd6\xf7m\x1a'
2025-06-08 14:26:35,251 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:26:35,251 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 14:26:35,252 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:26:35,252 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:26:35,252 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 14:26:35,253 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 14:26:35,253 [ERROR] [ca_cert.py:send_certificate] Failed to send certificate
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 6 bytes, expected 256 bytes.
2025-06-08 14:26:35,254 [ERROR] [server.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 6 bytes, expected 256 bytes.
2025-06-08 14:26:35,254 [ERROR] [device.py:send_pre_master_secret] Failed to send pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 79, in decrypt_message
    decrypted = private_key.decrypt(
        encrypted_message,
    ...<4 lines>...
        )
    )
ValueError: Decryption failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 171, in send_pre_master_secret
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 89, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: Decryption failed
2025-06-08 14:26:35,254 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 165, in <module>
    send_hello(client)
    ~~~~~~~~~~^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/server.py", line 87, in send_hello
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 76, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 6 bytes, expected 256 bytes.
2025-06-08 14:26:35,255 [INFO] [server.py:<module>] Server shut down
2025-06-08 14:26:35,255 [ERROR] [device.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 79, in decrypt_message
    decrypted = private_key.decrypt(
        encrypted_message,
    ...<4 lines>...
        )
    )
ValueError: Decryption failed

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 118, in send_hello
    pre_master_secret = send_pre_master_secret(client_socket, server_public_key)
  File "/Users/omerfarukbulut/info_sec/device.py", line 176, in send_pre_master_secret
    raise e
  File "/Users/omerfarukbulut/info_sec/device.py", line 171, in send_pre_master_secret
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 89, in decrypt_message
    raise ValueError(f"Decryption failed: {e}")
ValueError: Decryption failed: Decryption failed
2025-06-08 14:30:39,988 [INFO] [server.py:<module>] Server starting
2025-06-08 14:30:40,057 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 14:30:41,800 [INFO] [device.py:<module>] Device started
2025-06-08 14:30:41,867 [INFO] [device.py:<module>] Connected to server
2025-06-08 14:30:41,867 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 14:30:41,867 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59412)
2025-06-08 14:30:41,867 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:30:41,867 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:30:41,867 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 14:30:41,867 [INFO] [server.py:<module>] Expecting hello
2025-06-08 14:30:41,867 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 14:30:41,867 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 14:30:41,868 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:30:41,868 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 14:30:41,868 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:30:41,868 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 14:30:41,868 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 14:30:41,868 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 14:30:41,868 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 14:30:41,868 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 14:30:41,871 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 14:30:41,872 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 14:30:41,872 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 14:30:41,874 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:30:41,874 [INFO] [device.py:send_hello] Sent nonce: b'\xd5\x82\xb8&\x04V\xc2\x0152\xff\r\xc20\x11\xf0'
2025-06-08 14:30:41,874 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 14:30:41,874 [INFO] [server.py:<module>] Received nonce: b'\xd5\x82\xb8&\x04V\xc2\x0152\xff\r\xc20\x11\xf0'
2025-06-08 14:30:41,874 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:30:41,874 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 14:30:41,875 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:30:41,875 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:30:41,876 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 14:30:41,880 [ERROR] [ca_cert.py:send_certificate] Failed to send certificate
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 23, in send_certificate
    ack = client_socket.recv(256)
ConnectionResetError: [Errno 54] Connection reset by peer
2025-06-08 14:30:41,881 [ERROR] [server.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 23, in send_certificate
    ack = client_socket.recv(256)
ConnectionResetError: [Errno 54] Connection reset by peer
2025-06-08 14:30:41,881 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 165, in <module>
    send_hello(client)
    ~~~~~~~~~~^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/server.py", line 87, in send_hello
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 76, in send_hello
    send_certificate(client_socket, "certificates/server_certificate.json", private_key=server_private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 23, in send_certificate
    ack = client_socket.recv(256)
ConnectionResetError: [Errno 54] Connection reset by peer
2025-06-08 14:30:41,881 [INFO] [server.py:<module>] Server shut down
2025-06-08 14:30:55,239 [INFO] [server.py:<module>] Server starting
2025-06-08 14:30:55,307 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 14:30:57,091 [INFO] [device.py:<module>] Device started
2025-06-08 14:30:57,157 [INFO] [device.py:<module>] Connected to server
2025-06-08 14:30:57,157 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59419)
2025-06-08 14:30:57,157 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 14:30:57,158 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:30:57,158 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:30:57,158 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 14:30:57,158 [INFO] [server.py:<module>] Expecting hello
2025-06-08 14:30:57,158 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 14:30:57,158 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 14:30:57,158 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:30:57,158 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 14:30:57,158 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:30:57,158 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 14:30:57,158 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 14:30:57,158 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 14:30:57,158 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 14:30:57,159 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 14:30:57,160 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 14:30:57,161 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 14:30:57,161 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 14:30:57,163 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:30:57,163 [INFO] [device.py:send_hello] Sent nonce: b'\x92\xba\x11\x8c\x8c\xad\xd0OfHt\xd5\x18\x0f/\x93'
2025-06-08 14:30:57,163 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 14:30:57,163 [INFO] [server.py:<module>] Received nonce: b'\x92\xba\x11\x8c\x8c\xad\xd0OfHt\xd5\x18\x0f/\x93'
2025-06-08 14:30:57,163 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:30:57,163 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 14:30:57,164 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:30:57,164 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:30:57,164 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 14:30:57,164 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 14:30:57,165 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 14:30:57,165 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 14:30:57,165 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 14:30:57,165 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:30:57,165 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 14:30:57,165 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 14:30:57,167 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:30:57,167 [INFO] [server.py:send_hello] Sent nonce: b'\xa9x\x1d\x1ft>=r\xd5\x80\x16\x9d\xd6C\xc1\xb2'
2025-06-08 14:30:57,167 [INFO] [device.py:recv_hello] Received nonce: b'\xa9x\x1d\x1ft>=r\xd5\x80\x16\x9d\xd6C\xc1\xb2'
2025-06-08 14:30:57,167 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:30:57,167 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 14:30:57,168 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 14:30:57,168 [INFO] [server.py:<module>] Server shut down
2025-06-08 14:30:57,168 [ERROR] [device.py:send_pre_master_secret] Failed to send pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 169, in send_pre_master_secret
    ack = client_socket.recv(256)
ConnectionResetError: [Errno 54] Connection reset by peer
2025-06-08 14:32:36,835 [INFO] [server.py:<module>] Server starting
2025-06-08 14:32:36,903 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 14:32:39,016 [INFO] [device.py:<module>] Device started
2025-06-08 14:32:39,084 [INFO] [device.py:<module>] Connected to server
2025-06-08 14:32:39,084 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59428)
2025-06-08 14:32:39,084 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 14:32:39,084 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:32:39,084 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:32:39,084 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 14:32:39,084 [INFO] [server.py:<module>] Expecting hello
2025-06-08 14:32:39,084 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 14:32:39,084 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 14:32:39,085 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:32:39,085 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 14:32:39,085 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:32:39,085 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 14:32:39,085 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 14:32:39,085 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 14:32:39,085 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 14:32:39,086 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 14:32:39,087 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 14:32:39,088 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 14:32:39,088 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 14:32:39,090 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:32:39,090 [INFO] [device.py:send_hello] Sent nonce: b'\xb8\xb8\x054r*\x13S\xe6\xe6:\x15\xf7\x05\xa9\xe6'
2025-06-08 14:32:39,090 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 14:32:39,090 [INFO] [server.py:<module>] Received nonce: b'\xb8\xb8\x054r*\x13S\xe6\xe6:\x15\xf7\x05\xa9\xe6'
2025-06-08 14:32:39,090 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:32:39,090 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 14:32:39,091 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:32:39,091 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:32:39,091 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 14:32:39,091 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 14:32:39,091 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 14:32:39,091 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 14:32:39,091 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 14:32:39,092 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:32:39,092 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 14:32:39,092 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 14:32:39,094 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:32:39,094 [INFO] [server.py:send_hello] Sent nonce: b'\xd6=\x93\xa0\xce\x93\xd5R\x93\xb5\xe4\x8d\xb2\xc2p5'
2025-06-08 14:32:39,094 [INFO] [device.py:recv_hello] Received nonce: b'\xd6=\x93\xa0\xce\x93\xd5R\x93\xb5\xe4\x8d\xb2\xc2p5'
2025-06-08 14:32:39,095 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:32:39,095 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 14:32:39,096 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 14:32:39,096 [INFO] [server.py:<module>] Server shut down
2025-06-08 14:32:39,096 [ERROR] [device.py:send_pre_master_secret] Failed to send pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 169, in send_pre_master_secret
    ack = client_socket.recv(256)
ConnectionResetError: [Errno 54] Connection reset by peer
2025-06-08 14:34:29,551 [INFO] [server.py:<module>] Server starting
2025-06-08 14:34:29,619 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 14:34:31,423 [INFO] [device.py:<module>] Device started
2025-06-08 14:34:31,489 [INFO] [device.py:<module>] Connected to server
2025-06-08 14:34:31,489 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 14:34:31,489 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59440)
2025-06-08 14:34:31,490 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:34:31,490 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:34:31,490 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 14:34:31,490 [INFO] [server.py:<module>] Expecting hello
2025-06-08 14:34:31,490 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 14:34:31,490 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 14:34:31,490 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:34:31,490 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 14:34:31,490 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:34:31,490 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 14:34:31,490 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 14:34:31,490 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 14:34:31,490 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 14:34:31,490 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 14:34:31,493 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 14:34:31,494 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 14:34:31,494 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 14:34:31,496 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:34:31,496 [INFO] [device.py:send_hello] Sent nonce: b'H\x9b)*\xdc\x0f\x83\x06\xbf\xcb\x18H$#]D'
2025-06-08 14:34:31,496 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 14:34:31,496 [INFO] [server.py:<module>] Received nonce: b'H\x9b)*\xdc\x0f\x83\x06\xbf\xcb\x18H$#]D'
2025-06-08 14:34:31,496 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:34:31,496 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 14:34:31,497 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:34:31,497 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:34:31,498 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 14:34:31,498 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 14:34:31,498 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 14:34:31,498 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 14:34:31,498 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 14:34:31,498 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:34:31,499 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 14:34:31,499 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 14:34:31,501 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:34:31,501 [INFO] [server.py:send_hello] Sent nonce: b',H\x01\xe9\xe1\xb6\xe0.\x0e\x1b\xdfU3\xf4:\xf0'
2025-06-08 14:34:31,501 [INFO] [device.py:recv_hello] Received nonce: b',H\x01\xe9\xe1\xb6\xe0.\x0e\x1b\xdfU3\xf4:\xf0'
2025-06-08 14:34:31,501 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:34:31,502 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 14:34:31,502 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 14:34:31,502 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:34:31,502 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:34:31,502 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 14:34:31,502 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 14:34:31,502 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 14:34:31,502 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 14:34:31,504 [INFO] [server.py:<module>] Received pre-master secret: b'\xe9\x07$\x03\xf5\xad\x8ciG\xe3\x8c\xdf\xfft\x1c\x8f\xe9\xcd\x9c\xa5\x97T\x94\xb5\x9c\x10I\x88N\r]\x9f'
2025-06-08 14:34:31,504 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:34:31,504 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:34:31,505 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 14:34:31,505 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 14:34:31,505 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:34:31,505 [INFO] [server.py:<module>] Received header: b'<ENDD>'
2025-06-08 14:34:31,505 [INFO] [server.py:<module>] Received end of file
2025-06-08 14:34:31,505 [INFO] [server.py:<module>] Server closed
2025-06-08 14:34:31,505 [INFO] [server.py:<module>] Server shut down
2025-06-08 14:34:31,505 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\xc9[\x86}\xbek\xc3Y"DA\xc4{\xec\xf80', 'server_enc_key': b'\xde\xf5/\x96R\xa5`$\rI\xb8\xd1+\x0eHT', 'client_mac_key': b'\x01\nZ#\xe4\xdf\x0c\xf9\xe9\xe2\xb3\x05\x8f\xfb\xfe1', 'server_mac_key': b'\x98A\xde\xb6\xbc\xcc\xb9\x1a\xc7\x9cF4\xeb\xda4?', 'iv': b'\xd42-S+\xfa\x03x\x1c\x93K\xdcP$F\x1a'}
2025-06-08 14:34:31,505 [INFO] [device.py:<module>] Device socket closed
2025-06-08 14:40:11,148 [INFO] [server.py:<module>] Server starting
2025-06-08 14:40:11,217 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 14:40:13,541 [INFO] [device.py:<module>] Device started
2025-06-08 14:40:13,608 [INFO] [device.py:<module>] Connected to server
2025-06-08 14:40:13,608 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 14:40:13,608 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59487)
2025-06-08 14:40:13,608 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:40:13,608 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:40:13,608 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 14:40:13,608 [INFO] [server.py:<module>] Expecting hello
2025-06-08 14:40:13,608 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 14:40:13,608 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 14:40:13,608 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:40:13,608 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:40:13,608 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 14:40:13,609 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 14:40:13,609 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 14:40:13,609 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 14:40:13,609 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 14:40:13,609 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 14:40:13,612 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 14:40:13,614 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 14:40:13,614 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 14:40:13,615 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:40:13,615 [INFO] [device.py:send_hello] Sent nonce: b'\xd4\xfa\xb2\x0e\xa7\xc5\x8b\xe7\x9b\xa3\xe1\xb7\xc3RYm'
2025-06-08 14:40:13,615 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 14:40:13,615 [INFO] [server.py:<module>] Received nonce: b'\xd4\xfa\xb2\x0e\xa7\xc5\x8b\xe7\x9b\xa3\xe1\xb7\xc3RYm'
2025-06-08 14:40:13,615 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:40:13,615 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 14:40:13,616 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:40:13,616 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:40:13,616 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 14:40:13,616 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 14:40:13,616 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 14:40:13,616 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 14:40:13,616 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 14:40:13,617 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:40:13,617 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 14:40:13,617 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 14:40:13,619 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:40:13,619 [INFO] [server.py:send_hello] Sent nonce: b'\xc3\xc2\xc4\x81\xe1\xf93\x1d\xddM\xb8\x80\x8d\x1f\xc7\xbb'
2025-06-08 14:40:13,619 [INFO] [device.py:recv_hello] Received nonce: b'\xc3\xc2\xc4\x81\xe1\xf93\x1d\xddM\xb8\x80\x8d\x1f\xc7\xbb'
2025-06-08 14:40:13,619 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:40:13,619 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 14:40:13,620 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 14:40:13,620 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:40:13,620 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:40:13,620 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 14:40:13,620 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 14:40:13,620 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 14:40:13,620 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 14:40:13,622 [INFO] [server.py:<module>] Received pre-master secret: b'\x15\xbb$\x9e)\xe06\xdb\xff\x8e\xdb\xdd\xf7\x05\xfd\xdf\xe7Rv\xb1\xad\xde\x8e\xd6\x8c6qh\xdb\x1f\x16['
2025-06-08 14:40:13,622 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:40:13,622 [ERROR] [server.py:<module>] Failed to receive pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 183, in <module>
    DERIVED_KEYS = derive_keys(MASTER_SECRET, NONCE_DEVICE, NONCE_SERVER)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 93, in derive_keys
    seed = nonce1 + nonce2
           ~~~~~~~^~~~~~~~
TypeError: can't concat NoneType to bytes
2025-06-08 14:40:13,623 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 14:40:13,623 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 14:40:13,623 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\x80\xb1\xdc/\xa3\x8b\xaa\x10\x00\x17,\xec\x11\xab\xbc\xb3', 'server_enc_key': b'\xae\x15\xacO*\xc4\xe6\x19a]\xe8\xea\x93!j\xbc', 'client_mac_key': b'\x99\xba\xdc\xea_I\xd4H\xa2b\x11\x01\x12\xaa\xb6\x13', 'server_mac_key': b'\x82\xa8l\xf7\x96\x9f\x13\xb2g\xe20\x14\xdan\xd9\xce', 'iv': b'\xea\xbc\xbe%\xe8\xbe\x8f\x9d\xee\x9a\x0c\xc0\xa20L\x81'}
2025-06-08 14:40:13,623 [INFO] [device.py:<module>] Device socket closed
2025-06-08 14:40:13,623 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 187, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 183, in <module>
    DERIVED_KEYS = derive_keys(MASTER_SECRET, NONCE_DEVICE, NONCE_SERVER)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 93, in derive_keys
    seed = nonce1 + nonce2
           ~~~~~~~^~~~~~~~
TypeError: can't concat NoneType to bytes
2025-06-08 14:40:13,623 [INFO] [server.py:<module>] Server shut down
2025-06-08 14:42:12,908 [INFO] [server.py:<module>] Server starting
2025-06-08 14:42:12,978 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 14:42:15,107 [INFO] [device.py:<module>] Device started
2025-06-08 14:42:15,175 [INFO] [device.py:<module>] Connected to server
2025-06-08 14:42:15,175 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 14:42:15,175 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59506)
2025-06-08 14:42:15,175 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:42:15,175 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:42:15,175 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 14:42:15,175 [INFO] [server.py:<module>] Expecting hello
2025-06-08 14:42:15,175 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 14:42:15,175 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 14:42:15,175 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:42:15,175 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:42:15,175 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 14:42:15,175 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 14:42:15,175 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 14:42:15,176 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 14:42:15,176 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 14:42:15,176 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 14:42:15,178 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 14:42:15,180 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 14:42:15,180 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 14:42:15,181 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:42:15,181 [INFO] [device.py:send_hello] Sent nonce: b'Y\x1b\xea\xa4rlZ \x1c@D\x15\xfd\xd7.\x95'
2025-06-08 14:42:15,181 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 14:42:15,181 [INFO] [server.py:<module>] Received nonce: b'Y\x1b\xea\xa4rlZ \x1c@D\x15\xfd\xd7.\x95'
2025-06-08 14:42:15,181 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:42:15,181 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 14:42:15,182 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:42:15,182 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:42:15,183 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 14:42:15,183 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 14:42:15,183 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 14:42:15,183 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 14:42:15,183 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 14:42:15,183 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:42:15,184 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 14:42:15,184 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 14:42:15,186 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:42:15,186 [INFO] [server.py:send_hello] Sent nonce: b'\x01=D\x19\xect\xf4]\x00lo\xa2Ye\x89\x1e'
2025-06-08 14:42:15,186 [INFO] [device.py:recv_hello] Received nonce: b'\x01=D\x19\xect\xf4]\x00lo\xa2Ye\x89\x1e'
2025-06-08 14:42:15,186 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:42:15,187 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 14:42:15,187 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 14:42:15,187 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:42:15,187 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:42:15,187 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 14:42:15,187 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 14:42:15,188 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 14:42:15,188 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 14:42:15,189 [INFO] [server.py:<module>] Received pre-master secret: b'?\xdd\xf8\xa7\x0c\xf3\x97E\x05\x9f\xd5e\xecX\xac/h-\xab)\xe4uf\x0b\xdbY\xe1\x00\x81\xe7\xff\xf6'
2025-06-08 14:42:15,189 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:42:15,189 [INFO] [server.py:<module>] Nonce device: b'Y\x1b\xea\xa4rlZ \x1c@D\x15\xfd\xd7.\x95'
2025-06-08 14:42:15,189 [INFO] [server.py:<module>] Nonce server: None
2025-06-08 14:42:15,190 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 14:42:15,189 [ERROR] [server.py:<module>] Failed to receive pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 185, in <module>
    DERIVED_KEYS = derive_keys(MASTER_SECRET, NONCE_DEVICE, NONCE_SERVER)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 93, in derive_keys
    seed = nonce1 + nonce2
           ~~~~~~~^~~~~~~~
TypeError: can't concat NoneType to bytes
2025-06-08 14:42:15,190 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 14:42:15,190 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'{\xe9e\x01\xf2\xdd~\xe0N!\xd2\x9a\x01\xae\xaa\xc9', 'server_enc_key': b'\xf3v\xdc\x8d)#\xff\x1d\x12(\xc0\xac=\x9f\xda\xdd', 'client_mac_key': b'\xd2\x8f\x13 \x0f\xc0\xbe\xfe[v\x86"\x08\x1b\x12Z', 'server_mac_key': b'^\x0c\x94\x97\xd3K\x0b\xf9\x99\x1e\xf4\x8a\x07\xd9\x9b\x92', 'iv': b'\xdf\x9e\x8a\xdd\xd8\xec3\xf0\xcan^R\xe7J\xc9\xa3'}
2025-06-08 14:42:15,190 [INFO] [device.py:<module>] Device socket closed
2025-06-08 14:42:15,190 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 189, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 185, in <module>
    DERIVED_KEYS = derive_keys(MASTER_SECRET, NONCE_DEVICE, NONCE_SERVER)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 93, in derive_keys
    seed = nonce1 + nonce2
           ~~~~~~~^~~~~~~~
TypeError: can't concat NoneType to bytes
2025-06-08 14:42:15,191 [INFO] [server.py:<module>] Server shut down
2025-06-08 14:42:45,743 [INFO] [server.py:<module>] Server starting
2025-06-08 14:42:45,824 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 14:42:47,499 [INFO] [device.py:<module>] Device started
2025-06-08 14:42:47,567 [INFO] [device.py:<module>] Connected to server
2025-06-08 14:42:47,567 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59513)
2025-06-08 14:42:47,567 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 14:42:47,567 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:42:47,567 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:42:47,567 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 14:42:47,567 [INFO] [server.py:<module>] Expecting hello
2025-06-08 14:42:47,567 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 14:42:47,567 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 14:42:47,567 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:42:47,567 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:42:47,567 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 14:42:47,567 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 14:42:47,567 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 14:42:47,567 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 14:42:47,568 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 14:42:47,568 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 14:42:47,570 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 14:42:47,571 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 14:42:47,571 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 14:42:47,573 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:42:47,573 [INFO] [device.py:send_hello] Sent nonce: b"\x92\xda\x0b\xa7C\x07'\x81Z(\x1aa\x9e\x8b\xd3i"
2025-06-08 14:42:47,574 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 14:42:47,574 [INFO] [server.py:<module>] Received nonce: b"\x92\xda\x0b\xa7C\x07'\x81Z(\x1aa\x9e\x8b\xd3i"
2025-06-08 14:42:47,574 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:42:47,574 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 14:42:47,574 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:42:47,574 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:42:47,575 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 14:42:47,575 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 14:42:47,575 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 14:42:47,575 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 14:42:47,575 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 14:42:47,575 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:42:47,576 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 14:42:47,576 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 14:42:47,578 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:42:47,578 [INFO] [server.py:send_hello] Sent nonce: b'U\x1f$\x17e\x92\xadi \x817$\x82\xcf\x8fI'
2025-06-08 14:42:47,578 [INFO] [device.py:recv_hello] Received nonce: b'U\x1f$\x17e\x92\xadi \x817$\x82\xcf\x8fI'
2025-06-08 14:42:47,578 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:42:47,579 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 14:42:47,579 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 14:42:47,579 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:42:47,579 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:42:47,579 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 14:42:47,579 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 14:42:47,579 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 14:42:47,579 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 14:42:47,581 [INFO] [server.py:<module>] Received pre-master secret: b'r\xc4\xc9o\xfb\xa6\xf6\xfe\x81\xbai\xf9\xecIMUP\xba\x8f\xf5\xa1\xd5\xc1p\x92\x80\xa1\xde0j\xcde'
2025-06-08 14:42:47,581 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:42:47,581 [INFO] [server.py:<module>] Nonce device: b"\x92\xda\x0b\xa7C\x07'\x81Z(\x1aa\x9e\x8b\xd3i"
2025-06-08 14:42:47,581 [INFO] [server.py:<module>] Nonce server: None
2025-06-08 14:42:47,582 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 14:42:47,582 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 14:42:47,581 [ERROR] [server.py:<module>] Failed to receive pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 185, in <module>
    DERIVED_KEYS = derive_keys(MASTER_SECRET, NONCE_DEVICE, NONCE_SERVER)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 93, in derive_keys
    seed = nonce1 + nonce2
           ~~~~~~~^~~~~~~~
TypeError: can't concat NoneType to bytes
2025-06-08 14:42:47,582 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 189, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 185, in <module>
    DERIVED_KEYS = derive_keys(MASTER_SECRET, NONCE_DEVICE, NONCE_SERVER)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 93, in derive_keys
    seed = nonce1 + nonce2
           ~~~~~~~^~~~~~~~
TypeError: can't concat NoneType to bytes
2025-06-08 14:42:47,582 [INFO] [server.py:<module>] Server shut down
2025-06-08 14:42:47,582 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\xb1`\xd3\xc9\xa9\xe0\xfd\xd4\xd0\x97\xd6\xf1\xb1*\x00\x8f', 'server_enc_key': b'\x1c|\xd13kk\xff\x8b8b\x90t\x08:\xf4\x1e', 'client_mac_key': b'\x1b\xccv\xdc\x88\xdf&\x95L1\xdeD7\x0c\x9ds', 'server_mac_key': b'\x80\xdd\xbeZO\xfc\th\xc14\x16\xb5\xcd\x8e\xa2\xaa', 'iv': b'\x08Z\xe9\x01\x0e\xbbi\x87\x8c\xd7\xbaX\xdd\xb7\x1f\xbb'}
2025-06-08 14:42:47,582 [INFO] [device.py:<module>] Device socket closed
2025-06-08 14:44:45,858 [INFO] [server.py:<module>] Server starting
2025-06-08 14:44:45,926 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 14:44:48,561 [INFO] [device.py:<module>] Device started
2025-06-08 14:44:48,629 [INFO] [device.py:<module>] Connected to server
2025-06-08 14:44:48,629 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 14:44:48,629 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 59530)
2025-06-08 14:44:48,629 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:44:48,629 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:44:48,629 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 14:44:48,629 [INFO] [server.py:<module>] Expecting hello
2025-06-08 14:44:48,629 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 14:44:48,629 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 14:44:48,630 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:44:48,630 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:44:48,630 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 14:44:48,630 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 14:44:48,630 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 14:44:48,630 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 14:44:48,630 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 14:44:48,630 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 14:44:48,633 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 14:44:48,635 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 14:44:48,635 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 14:44:48,636 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:44:48,636 [INFO] [device.py:send_hello] Sent nonce: b'\x88!\x8cz\xd7c\x84:\xc9%\x00\x9e\x94\x14\x11\x18'
2025-06-08 14:44:48,636 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 14:44:48,636 [INFO] [server.py:<module>] Received nonce: b'\x88!\x8cz\xd7c\x84:\xc9%\x00\x9e\x94\x14\x11\x18'
2025-06-08 14:44:48,637 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:44:48,637 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 14:44:48,637 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 14:44:48,637 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 14:44:48,638 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 14:44:48,638 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 14:44:48,638 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 14:44:48,638 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 14:44:48,638 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 14:44:48,638 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:44:48,639 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 14:44:48,639 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 14:44:48,641 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 14:44:48,642 [INFO] [server.py:send_hello] Sent nonce: b'\x93r\x15\xb3.\xf8E\xc8\xec\x8bM\x9a\x80\xdf]\xb1'
2025-06-08 14:44:48,642 [INFO] [device.py:recv_hello] Received nonce: b'\x93r\x15\xb3.\xf8E\xc8\xec\x8bM\x9a\x80\xdf]\xb1'
2025-06-08 14:44:48,642 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 14:44:48,642 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 14:44:48,643 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 14:44:48,643 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:44:48,643 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:44:48,643 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 14:44:48,643 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 14:44:48,643 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 14:44:48,643 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 14:44:48,644 [INFO] [server.py:<module>] Received pre-master secret: b'[\xcf\xe0\x10\xb0\xbdu\xe79\xcc\xb0\xa9\x11m\xf4\xbc\x0c@\x18\x17H\x15\xe7\xdc\xab\xb4\xc8\xb0D\xf6\xe3\xa3'
2025-06-08 14:44:48,644 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 14:44:48,644 [INFO] [server.py:<module>] Nonce device: b'\x88!\x8cz\xd7c\x84:\xc9%\x00\x9e\x94\x14\x11\x18'
2025-06-08 14:44:48,644 [INFO] [server.py:<module>] Nonce server: b'\x93r\x15\xb3.\xf8E\xc8\xec\x8bM\x9a\x80\xdf]\xb1'
2025-06-08 14:44:48,645 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'$\xfcy\xb7@\x99O\xddB1\n\xb31\x8d\xf4\xaa', 'server_enc_key': b'Z\x1a\xd9 \xbe\xae\x89\r\xc2\xb0^\xe2\xc2\x90yA', 'client_mac_key': b'\xef\xb5\x81\x1bF3/8z\xe6\xf2\x03\xfc\x1bv\x94', 'server_mac_key': b'\xe11\xee\xf1=\x82t\x11\xc9\xd7\xec\x113"\xd0\xbe', 'iv': b'\x81\xca\xa1j\xb5\x84\xfb9\x1e?A\x1bR\xad\xc9y'}
2025-06-08 14:44:48,645 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 14:44:48,646 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 14:44:48,646 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 14:44:48,646 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 14:44:48,646 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'$\xfcy\xb7@\x99O\xddB1\n\xb31\x8d\xf4\xaa', 'server_enc_key': b'Z\x1a\xd9 \xbe\xae\x89\r\xc2\xb0^\xe2\xc2\x90yA', 'client_mac_key': b'\xef\xb5\x81\x1bF3/8z\xe6\xf2\x03\xfc\x1bv\x94', 'server_mac_key': b'\xe11\xee\xf1=\x82t\x11\xc9\xd7\xec\x113"\xd0\xbe', 'iv': b'\x81\xca\xa1j\xb5\x84\xfb9\x1e?A\x1bR\xad\xc9y'}
2025-06-08 14:44:48,646 [INFO] [server.py:<module>] Received header: b'<ENDD>'
2025-06-08 14:44:48,646 [INFO] [device.py:<module>] Device socket closed
2025-06-08 14:44:48,646 [INFO] [server.py:<module>] Received end of file
2025-06-08 14:44:48,646 [INFO] [server.py:<module>] Server closed
2025-06-08 14:44:48,646 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:01:43,164 [INFO] [server.py:<module>] Server starting
2025-06-08 19:01:43,232 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:02:07,820 [INFO] [device.py:<module>] Device started
2025-06-08 19:02:07,888 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:02:07,888 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:02:07,888 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60575)
2025-06-08 19:02:07,888 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:02:07,888 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:02:07,889 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:02:07,889 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:02:07,889 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:02:07,889 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:02:07,889 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:02:07,889 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:02:07,889 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:02:07,889 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:02:07,889 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:02:07,889 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:02:07,889 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:02:07,889 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:02:07,889 [ERROR] [server.py:recv_certificate] Failed to receive or validate certificate.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 57, in recv_certificate
    ack = encrypt_message("CERT_RECEIVED", device_public_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 69, in encrypt_message
    padding.OAEP(
    ^^^^^^^^^^^^
AttributeError: module 'cryptography.hazmat.primitives.padding' has no attribute 'OAEP'
2025-06-08 19:02:07,890 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 169, in <module>
    if validate_certificate(certificate, ca_public_key):
       ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 49, in validate_certificate
    cert_data = cert_bundle["certificate"]
                ~~~~~~~~~~~^^^^^^^^^^^^^^^
TypeError: 'NoneType' object is not subscriptable
2025-06-08 19:02:07,891 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:02:07,891 [ERROR] [ca_cert.py:send_certificate] Failed to send certificate
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 78, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 19:02:07,891 [ERROR] [device.py:send_hello] Failed to send hello
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 111, in send_hello
    send_certificate(client_socket, "certificates/device_certificate.json", private_key)
    ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 28, in send_certificate
    raise e
  File "/Users/omerfarukbulut/info_sec/ca_cert.py", line 24, in send_certificate
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 78, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 19:02:54,628 [INFO] [server.py:<module>] Server starting
2025-06-08 19:02:54,696 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:02:56,434 [INFO] [device.py:<module>] Device started
2025-06-08 19:02:56,501 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:02:56,501 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:02:56,501 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60581)
2025-06-08 19:02:56,501 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:02:56,501 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:02:56,502 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:02:56,502 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:02:56,502 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:02:56,502 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:02:56,502 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:02:56,502 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:02:56,502 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:02:56,502 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:02:56,502 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:02:56,502 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:02:56,502 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:02:56,502 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:02:56,505 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:02:56,506 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:02:56,506 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:02:56,508 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:02:56,508 [INFO] [device.py:send_hello] Sent nonce: b'\xc4\xd9l\xd5\xd9\xf4\xa0\xd3uLE`XCR\xf0'
2025-06-08 19:02:56,508 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:02:56,508 [INFO] [server.py:<module>] Received nonce: b'\xc4\xd9l\xd5\xd9\xf4\xa0\xd3uLE`XCR\xf0'
2025-06-08 19:02:56,508 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:02:56,508 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:02:56,509 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:02:56,509 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:02:56,510 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:02:56,510 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:02:56,510 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:02:56,510 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:02:56,510 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:02:56,510 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:02:56,510 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:02:56,510 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:02:56,512 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:02:56,512 [INFO] [server.py:send_hello] Sent nonce: b'\xa3\x0c\xad#\xafS\xc6\x80J\xb3\x98\xe7}\xebA\xb3'
2025-06-08 19:02:56,512 [INFO] [device.py:recv_hello] Received nonce: b'\xa3\x0c\xad#\xafS\xc6\x80J\xb3\x98\xe7}\xebA\xb3'
2025-06-08 19:02:56,512 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:02:56,513 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:02:56,514 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:02:56,514 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:02:56,514 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:02:56,514 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:02:56,514 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:02:56,514 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:02:56,514 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:02:56,515 [INFO] [server.py:<module>] Received pre-master secret: b'\xcf&\xf7\x8f5\xe7b\xb8\xda\xee\x86+\x1dt\x91\x87L\x03\xd9\xb8S.pl \xf3\x92\xff\xa1\x0bIf'
2025-06-08 19:02:56,515 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:02:56,515 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\x86|^\xddF\x93\xe2,\x89\x19E{}\x0c\x1f\x88', 'server_enc_key': b'\x87,\xc3\x9a\x9ea\x15\xac\xe0\xe8`-\x10\xe5\x164', 'client_mac_key': b'\xd7\xa1\xab\xe4,kL\xde\x9c\xba3\xd0\xce)bO', 'server_mac_key': b'\xf8q\xdf\xbfU\xf3\x04]\x1a\xd2.\x7f\xc8\xc5\xa2_', 'iv': b'"Ve@\xa3\xd7\xfc\tN$\xf2h\xbf@^R'}
2025-06-08 19:02:56,515 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:02:56,516 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:02:56,516 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\x86|^\xddF\x93\xe2,\x89\x19E{}\x0c\x1f\x88', 'server_enc_key': b'\x87,\xc3\x9a\x9ea\x15\xac\xe0\xe8`-\x10\xe5\x164', 'client_mac_key': b'\xd7\xa1\xab\xe4,kL\xde\x9c\xba3\xd0\xce)bO', 'server_mac_key': b'\xf8q\xdf\xbfU\xf3\x04]\x1a\xd2.\x7f\xc8\xc5\xa2_', 'iv': b'"Ve@\xa3\xd7\xfc\tN$\xf2h\xbf@^R'}
2025-06-08 19:02:56,516 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:02:56,516 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:02:56,516 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:02:56,516 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:02:56,516 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:02:56,516 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 182, in send_secure_text
    sym_key = keys["client_enc_key"]
              ~~~~^^^^^^^^^^^^^^^^^^
TypeError: 'NoneType' object is not subscriptable
2025-06-08 19:02:56,521 [WARNING] [server.py:recv_exact] Connection interrupted during receive
2025-06-08 19:02:56,521 [INFO] [server.py:recv_exact] Received 0 bytes successfully
2025-06-08 19:02:56,521 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:02:56,521 [ERROR] [server.py:recv_secure_text] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:02:56,522 [ERROR] [server.py:<module>] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 204, in <module>
    decrypted_message = recv_secure_text(encrypted_message, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 106, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:02:56,523 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 212, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 204, in <module>
    decrypted_message = recv_secure_text(encrypted_message, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 106, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:02:56,523 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:03:49,733 [INFO] [server.py:<module>] Server starting
2025-06-08 19:03:49,800 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:03:51,782 [INFO] [device.py:<module>] Device started
2025-06-08 19:03:51,850 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:03:51,850 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60589)
2025-06-08 19:03:51,850 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:03:51,854 [WARNING] [server.py:recv_exact] Connection interrupted during receive
2025-06-08 19:03:51,854 [INFO] [server.py:recv_exact] Received 0 bytes successfully
2025-06-08 19:03:51,854 [INFO] [server.py:<module>] Received header: b''
2025-06-08 19:03:51,854 [ERROR] [server.py:<module>] Invalid header received
2025-06-08 19:03:51,854 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:05:00,096 [INFO] [server.py:<module>] Server starting
2025-06-08 19:05:00,164 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:05:02,314 [INFO] [device.py:<module>] Device started
2025-06-08 19:05:02,381 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:05:02,381 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60602)
2025-06-08 19:05:02,381 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:05:02,381 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:05:02,381 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:05:02,381 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:05:02,381 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:05:02,381 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:05:02,381 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:05:02,382 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:05:02,383 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:05:02,383 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:05:02,383 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:05:02,383 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:05:02,383 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:05:02,383 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:05:02,383 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:05:02,386 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:05:02,387 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:05:02,387 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:05:02,389 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:05:02,389 [INFO] [device.py:send_hello] Sent nonce: b'h\xd9\xeb\xee\x8b\xb3 \x1d,\r\xe0\xb9\xdf\xff\xe6\xd0'
2025-06-08 19:05:02,389 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:05:02,389 [INFO] [server.py:<module>] Received nonce: b'h\xd9\xeb\xee\x8b\xb3 \x1d,\r\xe0\xb9\xdf\xff\xe6\xd0'
2025-06-08 19:05:02,389 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:05:02,389 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:05:02,390 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:05:02,390 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:05:02,391 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:05:02,392 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:05:02,392 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:05:02,394 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:05:02,395 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:05:02,397 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:05:02,406 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:05:02,406 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:05:02,427 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:05:02,441 [INFO] [server.py:send_hello] Sent nonce: b"W\xca\xde\xfc\xf7F%\xe0Z\xd4'\xa2\x16{\xe5\xc6"
2025-06-08 19:05:02,441 [INFO] [device.py:recv_hello] Received nonce: b"W\xca\xde\xfc\xf7F%\xe0Z\xd4'\xa2\x16{\xe5\xc6"
2025-06-08 19:05:02,441 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:05:02,442 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:05:02,443 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:05:02,443 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:05:02,443 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:05:02,443 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:05:02,443 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:05:02,443 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:05:02,443 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:05:02,445 [INFO] [server.py:<module>] Received pre-master secret: b'\xd7L\x0e+"\xa0e\xb2\xcd6\x8f\xa3\xcefR\x0c\xd5\xda\x15o\xef\xce\x14\xc0F\xe3\xf9-\x95[\xe2p'
2025-06-08 19:05:02,445 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:05:02,446 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\xd9\xa8\xf3\x0b\x85\r\x08\xa0\x00\xcf\x85#X\xe4\xd1\xa3', 'server_enc_key': b'\x1d\xd8\x9d\x87\x18D\xe40\xf4\x9e\x06\x88\xd2\xce\xdb\xdd', 'client_mac_key': b'\xa4bL\xb2l\x9c\xadp\x8b\x81huW\xcc\xd8\xbb', 'server_mac_key': b'\xea\x0b4e\x8c-\xb7\xa5\xbb}\x831\x8d\xf5,\xe0', 'iv': b's\x1b\r\xb6\xb7\x8e\xcb\xee}.\xd0\x8eQ@\x18\xd0'}
2025-06-08 19:05:02,446 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:05:02,447 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:05:02,447 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\xd9\xa8\xf3\x0b\x85\r\x08\xa0\x00\xcf\x85#X\xe4\xd1\xa3', 'server_enc_key': b'\x1d\xd8\x9d\x87\x18D\xe40\xf4\x9e\x06\x88\xd2\xce\xdb\xdd', 'client_mac_key': b'\xa4bL\xb2l\x9c\xadp\x8b\x81huW\xcc\xd8\xbb', 'server_mac_key': b'\xea\x0b4e\x8c-\xb7\xa5\xbb}\x831\x8d\xf5,\xe0', 'iv': b's\x1b\r\xb6\xb7\x8e\xcb\xee}.\xd0\x8eQ@\x18\xd0'}
2025-06-08 19:05:02,447 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:05:02,447 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:05:02,447 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:05:02,447 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:05:02,447 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:05:02,447 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 185, in send_secure_text
    encrypted_message = encrypt_aes_with_hmac(message, sym_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 113, in encrypt_aes_with_hmac
    padder = padding.PKCS7(128).padder()
             ^^^^^^^^^^^^^
AttributeError: module 'cryptography.hazmat.primitives.asymmetric.padding' has no attribute 'PKCS7'
2025-06-08 19:05:02,464 [WARNING] [server.py:recv_exact] Connection interrupted during receive
2025-06-08 19:05:02,465 [INFO] [server.py:recv_exact] Received 0 bytes successfully
2025-06-08 19:05:02,465 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:05:02,465 [ERROR] [server.py:recv_secure_text] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:05:02,465 [ERROR] [server.py:<module>] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 204, in <module>
    decrypted_message = recv_secure_text(encrypted_message, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 106, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:05:02,466 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 212, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 204, in <module>
    decrypted_message = recv_secure_text(encrypted_message, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 106, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:05:02,467 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:06:53,876 [INFO] [server.py:<module>] Server starting
2025-06-08 19:06:53,946 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:06:55,761 [INFO] [device.py:<module>] Device started
2025-06-08 19:06:55,830 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:06:55,830 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60633)
2025-06-08 19:06:55,830 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:06:55,830 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:06:55,830 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:06:55,830 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:06:55,830 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:06:55,830 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:06:55,830 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:06:55,831 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:06:55,831 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:06:55,831 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:06:55,831 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:06:55,831 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:06:55,831 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:06:55,831 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:06:55,831 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:06:55,835 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:06:55,836 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:06:55,837 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:06:55,840 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:06:55,841 [INFO] [device.py:send_hello] Sent nonce: b'\xeb#\xadM@:7\x0b\xbd+w\t\x16\xda\x10m'
2025-06-08 19:06:55,842 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:06:55,843 [INFO] [server.py:<module>] Received nonce: b'\xeb#\xadM@:7\x0b\xbd+w\t\x16\xda\x10m'
2025-06-08 19:06:55,844 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:06:55,844 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:06:55,854 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:06:55,854 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:06:55,855 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:06:55,855 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:06:55,855 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:06:55,855 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:06:55,855 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:06:55,855 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:06:55,868 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:06:55,869 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:06:55,895 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:06:55,896 [INFO] [server.py:send_hello] Sent nonce: b'\xfb\x0b\xd2\xe8\n\xd6\x08.\x07\xae\x8e\x80\x0b\xe0xt'
2025-06-08 19:06:55,896 [INFO] [device.py:recv_hello] Received nonce: b'\xfb\x0b\xd2\xe8\n\xd6\x08.\x07\xae\x8e\x80\x0b\xe0xt'
2025-06-08 19:06:55,896 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:06:55,896 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:06:55,897 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:06:55,897 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:06:55,897 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:06:55,897 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:06:55,897 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:06:55,897 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:06:55,897 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:06:55,899 [INFO] [server.py:<module>] Received pre-master secret: b' \xc7\x8f\x0fa\xcb\xe5\xe9kQ\x90\x84I\xb0\x1a`\xc8H\xaa4\xb6)\xa0A\x90C\x8e\x14\xd5\xf7\x1f\xdd'
2025-06-08 19:06:55,899 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:06:55,899 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'S5\xe8\x82\t\x04y}<i\xbdhL5\xdd\xa7', 'server_enc_key': b';\xcd`\xf9\x072\xb9\xf3\\\x94\xdf\x0e\x1fk\xce\xc8', 'client_mac_key': b'\xfb\xcc\x0101\xf2=\xad\xe4*\x82R\x92Nl\xbe', 'server_mac_key': b'$\xc6\xd1\xf9\xc3\t1W\xa5b\xc8\xfe\x8b\x0e\x08\xfe', 'iv': b'\x13\x13\x8fA\x08\xc8\x8a\x84z>~\xe4[\xdf~;'}
2025-06-08 19:06:55,899 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:06:55,900 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:06:55,900 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'S5\xe8\x82\t\x04y}<i\xbdhL5\xdd\xa7', 'server_enc_key': b';\xcd`\xf9\x072\xb9\xf3\\\x94\xdf\x0e\x1fk\xce\xc8', 'client_mac_key': b'\xfb\xcc\x0101\xf2=\xad\xe4*\x82R\x92Nl\xbe', 'server_mac_key': b'$\xc6\xd1\xf9\xc3\t1W\xa5b\xc8\xfe\x8b\x0e\x08\xfe', 'iv': b'\x13\x13\x8fA\x08\xc8\x8a\x84z>~\xe4[\xdf~;'}
2025-06-08 19:06:55,900 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:06:55,900 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:06:55,900 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:06:55,900 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:06:55,900 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:06:55,900 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 185, in send_secure_text
    encrypted_message = encrypt_aes_with_hmac(message, sym_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 115, in encrypt_aes_with_hmac
    padded_message = padder.update(message) + padder.finalize()
                     ~~~~~~~~~~~~~^^^^^^^^^
TypeError: argument 'buf': Cannot convert "<class 'str'>" instance to a buffer.
Did you mean to pass a bytestring instead?
2025-06-08 19:06:55,918 [WARNING] [server.py:recv_exact] Connection interrupted during receive
2025-06-08 19:06:55,919 [INFO] [server.py:recv_exact] Received 0 bytes successfully
2025-06-08 19:06:55,919 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:06:55,919 [ERROR] [server.py:recv_secure_text] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:06:55,920 [ERROR] [server.py:<module>] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 204, in <module>
    decrypted_message = recv_secure_text(encrypted_message, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 106, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:06:55,921 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 212, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 204, in <module>
    decrypted_message = recv_secure_text(encrypted_message, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 106, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:06:55,921 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:08:45,748 [INFO] [server.py:<module>] Server starting
2025-06-08 19:08:45,817 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:08:47,541 [INFO] [device.py:<module>] Device started
2025-06-08 19:08:47,608 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:08:47,608 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:08:47,608 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60651)
2025-06-08 19:08:47,608 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:08:47,608 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:08:47,608 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:08:47,608 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:08:47,608 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:08:47,608 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:08:47,609 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:08:47,609 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:08:47,609 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:08:47,609 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:08:47,609 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:08:47,609 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:08:47,609 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:08:47,609 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:08:47,611 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:08:47,612 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:08:47,612 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:08:47,614 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:08:47,614 [INFO] [device.py:send_hello] Sent nonce: b'\xb2H\xe2\x9fq\xb9@e|\xfc\xea\xdfw\x85\xe1j'
2025-06-08 19:08:47,614 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:08:47,614 [INFO] [server.py:<module>] Received nonce: b'\xb2H\xe2\x9fq\xb9@e|\xfc\xea\xdfw\x85\xe1j'
2025-06-08 19:08:47,614 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:08:47,614 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:08:47,614 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:08:47,614 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:08:47,615 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:08:47,615 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:08:47,615 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:08:47,615 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:08:47,615 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:08:47,616 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:08:47,616 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:08:47,616 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:08:47,618 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:08:47,618 [INFO] [server.py:send_hello] Sent nonce: b'\xb8\xae\xf7\xa7\x8c\xf7\x13\x84\xb6\xc1d\x03a\x05]\x05'
2025-06-08 19:08:47,618 [INFO] [device.py:recv_hello] Received nonce: b'\xb8\xae\xf7\xa7\x8c\xf7\x13\x84\xb6\xc1d\x03a\x05]\x05'
2025-06-08 19:08:47,618 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:08:47,619 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:08:47,620 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:08:47,620 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:08:47,620 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:08:47,620 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:08:47,620 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:08:47,620 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:08:47,620 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:08:47,621 [INFO] [server.py:<module>] Received pre-master secret: b'\xc5\x92\x9f],\x14>`\xde\xac\x1b\x01Zr\xba7g\xef"\xd3H@\xd0\xb4U\xb4\x83A\x0b\xef\x04\xe8'
2025-06-08 19:08:47,621 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:08:47,621 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\xcb\x1c8\xbdP\x99\xdb\xa3+w\x82 \xd1t\x1ao', 'server_enc_key': b'\x14\xea\x9b\xa8?\x9b\xd2\xea\x92L\x99\xb0\xd7\xc4w\xbb', 'client_mac_key': b'\xeb\xa40\x1b\xe7\xebn\xd7\x10\xa4R\x8dU\xff\x19h', 'server_mac_key': b'\t\x16\xba\xbb\x03D\xc7\xb6EI\xa9]\xa6)\x91\x90', 'iv': b'\x9a\x04$\x9d\xdb\xc0\x7f\xfc/\xf7\xae\x83\xd9+1e'}
2025-06-08 19:08:47,622 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:08:47,622 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:08:47,622 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\xcb\x1c8\xbdP\x99\xdb\xa3+w\x82 \xd1t\x1ao', 'server_enc_key': b'\x14\xea\x9b\xa8?\x9b\xd2\xea\x92L\x99\xb0\xd7\xc4w\xbb', 'client_mac_key': b'\xeb\xa40\x1b\xe7\xebn\xd7\x10\xa4R\x8dU\xff\x19h', 'server_mac_key': b'\t\x16\xba\xbb\x03D\xc7\xb6EI\xa9]\xa6)\x91\x90', 'iv': b'\x9a\x04$\x9d\xdb\xc0\x7f\xfc/\xf7\xae\x83\xd9+1e'}
2025-06-08 19:08:47,622 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:08:47,622 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:08:47,623 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:08:47,623 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:08:47,623 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:08:47,623 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 185, in send_secure_text
    encrypted_message = encrypt_aes_with_hmac(message, sym_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 122, in encrypt_aes_with_hmac
    h = hmac.HMAC(mac_key, hashes.SHA256())
  File "/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/hmac.py", line 56, in __init__
    raise TypeError("Missing required argument 'digestmod'.")
TypeError: Missing required argument 'digestmod'.
2025-06-08 19:08:47,628 [WARNING] [server.py:recv_exact] Connection interrupted during receive
2025-06-08 19:08:47,628 [INFO] [server.py:recv_exact] Received 0 bytes successfully
2025-06-08 19:08:47,628 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:08:47,628 [ERROR] [server.py:recv_secure_text] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:08:47,629 [ERROR] [server.py:<module>] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 204, in <module>
    decrypted_message = recv_secure_text(encrypted_message, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 106, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:08:47,629 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 212, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 204, in <module>
    decrypted_message = recv_secure_text(encrypted_message, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 106, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:08:47,630 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:09:44,559 [INFO] [server.py:<module>] Server starting
2025-06-08 19:09:44,627 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:09:46,355 [INFO] [device.py:<module>] Device started
2025-06-08 19:09:46,422 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:09:46,423 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:09:46,423 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60662)
2025-06-08 19:09:46,423 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:09:46,423 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:09:46,423 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:09:46,423 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:09:46,423 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:09:46,423 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:09:46,424 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:09:46,424 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:09:46,424 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:09:46,424 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:09:46,424 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:09:46,424 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:09:46,424 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:09:46,424 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:09:46,426 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:09:46,428 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:09:46,428 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:09:46,429 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:09:46,430 [INFO] [device.py:send_hello] Sent nonce: b'\x98\xf4\x12q\xe2\xd3mi\x85\xa8\x89\xf7\xc4F\\\x0c'
2025-06-08 19:09:46,430 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:09:46,430 [INFO] [server.py:<module>] Received nonce: b'\x98\xf4\x12q\xe2\xd3mi\x85\xa8\x89\xf7\xc4F\\\x0c'
2025-06-08 19:09:46,430 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:09:46,430 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:09:46,431 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:09:46,431 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:09:46,431 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:09:46,431 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:09:46,431 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:09:46,431 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:09:46,431 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:09:46,432 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:09:46,432 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:09:46,432 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:09:46,434 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:09:46,434 [INFO] [server.py:send_hello] Sent nonce: b'.H|\x9aO\x9d\x12G\xb0t\x16l?\x0cG\x06'
2025-06-08 19:09:46,434 [INFO] [device.py:recv_hello] Received nonce: b'.H|\x9aO\x9d\x12G\xb0t\x16l?\x0cG\x06'
2025-06-08 19:09:46,435 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:09:46,435 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:09:46,436 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:09:46,436 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:09:46,436 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:09:46,436 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:09:46,436 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:09:46,436 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:09:46,436 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:09:46,437 [INFO] [server.py:<module>] Received pre-master secret: b'T\xcd\x0b\xfcj\x89\x1a\xadis\x042\x9a\n\x86n\x9dG\xcbQ\xba\xec\xf4f\x9d\x1c\x04\x99 yK\xcb'
2025-06-08 19:09:46,437 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:09:46,437 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b']m*c&\xbd\xc6\n/\xa9\xeb/\x13\xc0\x03q', 'server_enc_key': b'i\x9bb\x19d6=\xeb\x90\xe7\x97\x91\x8eQl\x96', 'client_mac_key': b'\xf9\x0f\xf4\xe5ag-\xf3\xe1\xd6\x99\xc5\xd2\\\x1a\xa9', 'server_mac_key': b'\xc8E@;T\xdf\xe9\x0e\xd0\xca\xe3`\xd3\xcf\x96\xd8', 'iv': b'K\xafV<\x80i\xe1\xdf_\xaa\x18\xa5\x15\xf2\x88\xa2'}
2025-06-08 19:09:46,437 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:09:46,438 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:09:46,438 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b']m*c&\xbd\xc6\n/\xa9\xeb/\x13\xc0\x03q', 'server_enc_key': b'i\x9bb\x19d6=\xeb\x90\xe7\x97\x91\x8eQl\x96', 'client_mac_key': b'\xf9\x0f\xf4\xe5ag-\xf3\xe1\xd6\x99\xc5\xd2\\\x1a\xa9', 'server_mac_key': b'\xc8E@;T\xdf\xe9\x0e\xd0\xca\xe3`\xd3\xcf\x96\xd8', 'iv': b'K\xafV<\x80i\xe1\xdf_\xaa\x18\xa5\x15\xf2\x88\xa2'}
2025-06-08 19:09:46,438 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:09:46,438 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:09:46,438 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:09:46,438 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:09:46,438 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:09:46,440 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 185, in send_secure_text
    encrypted_message = encrypt_aes_with_hmac(message.encode(), sym_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 122, in encrypt_aes_with_hmac
    h = hmac.HMAC(mac_key, hashes.SHA256())
  File "/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/hmac.py", line 56, in __init__
    raise TypeError("Missing required argument 'digestmod'.")
TypeError: Missing required argument 'digestmod'.
2025-06-08 19:09:46,447 [WARNING] [server.py:recv_exact] Connection interrupted during receive
2025-06-08 19:09:46,447 [INFO] [server.py:recv_exact] Received 0 bytes successfully
2025-06-08 19:09:46,447 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:09:46,447 [ERROR] [server.py:recv_secure_text] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:09:46,448 [ERROR] [server.py:<module>] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 204, in <module>
    decrypted_message = recv_secure_text(encrypted_message, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 106, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:09:46,448 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 212, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 204, in <module>
    decrypted_message = recv_secure_text(encrypted_message, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 106, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 97, in recv_secure_text
    encrypted_message = recv_exact(client_socket, 256)
  File "/Users/omerfarukbulut/info_sec/server.py", line 37, in recv_exact
    packet = sock.recv(size - len(data))
             ^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'recv'
2025-06-08 19:09:46,449 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:10:41,666 [INFO] [server.py:<module>] Server starting
2025-06-08 19:10:41,736 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:10:44,735 [INFO] [device.py:<module>] Device started
2025-06-08 19:10:44,803 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:10:44,803 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60671)
2025-06-08 19:10:44,803 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:10:44,803 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:10:44,803 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:10:44,803 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:10:44,803 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:10:44,803 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:10:44,803 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:10:44,804 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:10:44,804 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:10:44,804 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:10:44,804 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:10:44,804 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:10:44,804 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:10:44,804 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:10:44,804 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:10:44,807 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:10:44,809 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:10:44,809 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:10:44,810 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:10:44,810 [INFO] [device.py:send_hello] Sent nonce: b'\xd3\xe2?\xc1Kp\xe8\xa6\xfb\xe0\xe13\xa0vOh'
2025-06-08 19:10:44,810 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:10:44,810 [INFO] [server.py:<module>] Received nonce: b'\xd3\xe2?\xc1Kp\xe8\xa6\xfb\xe0\xe13\xa0vOh'
2025-06-08 19:10:44,810 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:10:44,810 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:10:44,811 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:10:44,811 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:10:44,811 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:10:44,811 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:10:44,811 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:10:44,811 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:10:44,811 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:10:44,812 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:10:44,812 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:10:44,812 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:10:44,814 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:10:44,814 [INFO] [server.py:send_hello] Sent nonce: b'[\xd0x\xddZ\x11;.9\xf3&\x82b\xea6>'
2025-06-08 19:10:44,814 [INFO] [device.py:recv_hello] Received nonce: b'[\xd0x\xddZ\x11;.9\xf3&\x82b\xea6>'
2025-06-08 19:10:44,814 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:10:44,814 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:10:44,815 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:10:44,815 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:10:44,815 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:10:44,815 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:10:44,815 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:10:44,815 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:10:44,815 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:10:44,817 [INFO] [server.py:<module>] Received pre-master secret: b'\xde\xe5\xc49e\xbe\n\xeb\xaet\xc0\xc2M^\xff\x80\xba3\xec\xd8K\x80\xfcW\x05+\xc9t}\xbc\xb9\xda'
2025-06-08 19:10:44,817 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:10:44,818 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:10:44,817 [ERROR] [server.py:<module>] Failed to receive pre-master secret
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 195, in <module>
    DERIVED_KEYS = derive_keys(MASTER_SECRET, NONCE_DEVICE, NONCE_SERVER)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 105, in derive_keys
    "client_enc_key": hkdf_expand(b"client_enc", 16),   # 128-bit AES key
                      ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 101, in hkdf_expand
    return hmac.new(master_secret, info, hashlib.sha256).digest()[:length]
           ^^^^^^^^
AttributeError: module 'cryptography.hazmat.primitives.hmac' has no attribute 'new'
2025-06-08 19:10:44,819 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 199, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 195, in <module>
    DERIVED_KEYS = derive_keys(MASTER_SECRET, NONCE_DEVICE, NONCE_SERVER)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 105, in derive_keys
    "client_enc_key": hkdf_expand(b"client_enc", 16),   # 128-bit AES key
                      ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 101, in hkdf_expand
    return hmac.new(master_secret, info, hashlib.sha256).digest()[:length]
           ^^^^^^^^
AttributeError: module 'cryptography.hazmat.primitives.hmac' has no attribute 'new'
2025-06-08 19:10:44,820 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:12:46,250 [INFO] [server.py:<module>] Server starting
2025-06-08 19:12:46,318 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:12:48,840 [INFO] [device.py:<module>] Device started
2025-06-08 19:12:48,906 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:12:48,907 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:12:48,906 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60690)
2025-06-08 19:12:48,907 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:12:48,907 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:12:48,907 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:12:48,907 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:12:48,907 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:12:48,907 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:12:48,908 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:12:48,908 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:12:48,908 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:12:48,908 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:12:48,908 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:12:48,908 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:12:48,908 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:12:48,908 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:12:48,911 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:12:48,912 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:12:48,912 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:12:48,914 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:12:48,914 [INFO] [device.py:send_hello] Sent nonce: b'\xe8\x10\xf7\xab\xe30\x1a\xd3?\x9d~ISk^\x84'
2025-06-08 19:12:48,914 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:12:48,914 [INFO] [server.py:<module>] Received nonce: b'\xe8\x10\xf7\xab\xe30\x1a\xd3?\x9d~ISk^\x84'
2025-06-08 19:12:48,914 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:12:48,914 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:12:48,915 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:12:48,915 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:12:48,916 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:12:48,916 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:12:48,916 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:12:48,916 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:12:48,916 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:12:48,916 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:12:48,916 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:12:48,916 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:12:48,918 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:12:48,918 [INFO] [server.py:send_hello] Sent nonce: b'R\xfb\xfd\xc7K\xb7\x8b\xd2\xa5oR\xe0\x81]I\xb9'
2025-06-08 19:12:48,918 [INFO] [device.py:recv_hello] Received nonce: b'R\xfb\xfd\xc7K\xb7\x8b\xd2\xa5oR\xe0\x81]I\xb9'
2025-06-08 19:12:48,918 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:12:48,919 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:12:48,920 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:12:48,920 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:12:48,920 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:12:48,920 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:12:48,920 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:12:48,920 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:12:48,920 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:12:48,921 [INFO] [server.py:<module>] Received pre-master secret: b'\x8fu\xfb\xb1g\xd2\xa1\x94acD\n~\xbc,\xef\t\xce\x99\x08^\x15\x03\xee\x94\xa8\xeeX\xe3.n\x8b'
2025-06-08 19:12:48,921 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:12:48,921 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\xbd\xf0!\x01\x01\x00\xee:\x12\x86g\x1f+;P"', 'server_enc_key': b'\xb5\x0e\x0bK@\xf7\xce\x8eo\xf6K\xe3\x88x\x04\x81', 'client_mac_key': b'JENt\xa3\x0f0\xf4"\xad\xc8dL\x16\xbb\xa8', 'server_mac_key': b'?\xee\xb9\x19\x0bf\x8e[\x12\xf2\xd6n\xfb\xff\xc9\x1d', 'iv': b'\x0e\xf9\xe3~c\xe7U\xed\x05c\xc3c5$gQ'}
2025-06-08 19:12:48,921 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:12:48,922 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:12:48,922 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\xbd\xf0!\x01\x01\x00\xee:\x12\x86g\x1f+;P"', 'server_enc_key': b'\xb5\x0e\x0bK@\xf7\xce\x8eo\xf6K\xe3\x88x\x04\x81', 'client_mac_key': b'JENt\xa3\x0f0\xf4"\xad\xc8dL\x16\xbb\xa8', 'server_mac_key': b'?\xee\xb9\x19\x0bf\x8e[\x12\xf2\xd6n\xfb\xff\xc9\x1d', 'iv': b'\x0e\xf9\xe3~c\xe7U\xed\x05c\xc3c5$gQ'}
2025-06-08 19:12:48,922 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:12:48,922 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:12:48,922 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:12:48,922 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:12:48,922 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:12:48,924 [INFO] [device.py:send_secure_text] Sent encrypted message
2025-06-08 19:14:00,520 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:14:00,517 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 190, in send_secure_text
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 19:14:02,410 [INFO] [server.py:<module>] Server starting
2025-06-08 19:14:04,770 [INFO] [server.py:<module>] Server starting
2025-06-08 19:14:07,971 [INFO] [server.py:<module>] Server starting
2025-06-08 19:14:13,054 [INFO] [server.py:<module>] Server starting
2025-06-08 19:14:24,532 [INFO] [server.py:<module>] Server starting
2025-06-08 19:14:29,260 [INFO] [server.py:<module>] Server starting
2025-06-08 19:14:35,008 [INFO] [server.py:<module>] Server starting
2025-06-08 19:14:35,074 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:14:37,818 [INFO] [device.py:<module>] Device started
2025-06-08 19:14:37,887 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:14:37,887 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:14:37,887 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60700)
2025-06-08 19:14:37,887 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:14:37,887 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:14:37,887 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:14:37,887 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:14:37,887 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:14:37,887 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:14:37,887 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:14:37,887 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:14:37,887 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:14:37,887 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:14:37,887 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:14:37,887 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:14:37,887 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:14:37,887 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:14:37,890 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:14:37,892 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:14:37,892 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:14:37,893 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:14:37,893 [INFO] [device.py:send_hello] Sent nonce: b'\xf1\xd0^\xbf\xef\x11\xc2p\x9a\xfe{mh\x8f\xcb\xb5'
2025-06-08 19:14:37,893 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:14:37,893 [INFO] [server.py:<module>] Received nonce: b'\xf1\xd0^\xbf\xef\x11\xc2p\x9a\xfe{mh\x8f\xcb\xb5'
2025-06-08 19:14:37,893 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:14:37,893 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:14:37,894 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:14:37,894 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:14:37,894 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:14:37,894 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:14:37,894 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:14:37,894 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:14:37,894 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:14:37,895 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:14:37,895 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:14:37,895 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:14:37,897 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:14:37,897 [INFO] [server.py:send_hello] Sent nonce: b'\x17rr\x89A{\xa3\x1bV\xd0z\xfcH\xb4A:'
2025-06-08 19:14:37,897 [INFO] [device.py:recv_hello] Received nonce: b'\x17rr\x89A{\xa3\x1bV\xd0z\xfcH\xb4A:'
2025-06-08 19:14:37,897 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:14:37,897 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:14:37,898 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:14:37,898 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:14:37,898 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:14:37,898 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:14:37,898 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:14:37,898 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:14:37,898 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:14:37,899 [INFO] [server.py:<module>] Received pre-master secret: b'{\xf2\x02\x13Cl\npI\x8a\xb0spF\xd0\xd8\x12\xcd\xb8\xad\x85;\x0f\xc0\x14\xbc\x8b(\xb3\xe21\xc1'
2025-06-08 19:14:37,900 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:14:37,900 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\x87\x19\x97\x15\x9b \xa6\x91\xace\xd9\x97\x8e\xdb\\\xd4', 'server_enc_key': b'\xb9l8\x8d\x81\x01\x81M\xdb$_\xa6\x91q\x1d,', 'client_mac_key': b'\xadA\x9d]N\xc0\xb8Y\xf0F\x8fy\xe3\xd2\xfd\x01', 'server_mac_key': b'DH\x0ePc$\xe6\xb6\x8eR\xe9\xfd\xd6\r*\xfc', 'iv': b'\xd9\x00:<\xd8K\x92\xfe>\x02\x8c\xd0\xe5d\x83k'}
2025-06-08 19:14:37,900 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:14:37,901 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:14:37,901 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\x87\x19\x97\x15\x9b \xa6\x91\xace\xd9\x97\x8e\xdb\\\xd4', 'server_enc_key': b'\xb9l8\x8d\x81\x01\x81M\xdb$_\xa6\x91q\x1d,', 'client_mac_key': b'\xadA\x9d]N\xc0\xb8Y\xf0F\x8fy\xe3\xd2\xfd\x01', 'server_mac_key': b'DH\x0ePc$\xe6\xb6\x8eR\xe9\xfd\xd6\r*\xfc', 'iv': b'\xd9\x00:<\xd8K\x92\xfe>\x02\x8c\xd0\xe5d\x83k'}
2025-06-08 19:14:37,901 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:14:37,901 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:14:37,901 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:14:37,901 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:14:37,901 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:14:37,902 [INFO] [device.py:send_secure_text] Sent encrypted message
2025-06-08 19:32:33,263 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:32:33,264 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 190, in send_secure_text
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 19:32:34,310 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:40,471 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:42,327 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:43,713 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:44,427 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:44,998 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:45,486 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:45,700 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:46,500 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:46,820 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:47,097 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:47,406 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:48,046 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:48,556 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:49,083 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:49,611 [INFO] [server.py:<module>] Server starting
2025-06-08 19:32:53,782 [INFO] [server.py:<module>] Server starting
2025-06-08 19:33:00,008 [INFO] [server.py:<module>] Server starting
2025-06-08 19:33:01,731 [INFO] [server.py:<module>] Server starting
2025-06-08 19:33:04,878 [INFO] [server.py:<module>] Server starting
2025-06-08 19:33:04,944 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:33:08,041 [INFO] [device.py:<module>] Device started
2025-06-08 19:33:08,108 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:33:08,108 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:33:08,108 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60813)
2025-06-08 19:33:08,109 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:33:08,109 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:33:08,109 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:33:08,109 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:33:08,109 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:33:08,109 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:33:08,109 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:33:08,109 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:33:08,109 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:33:08,109 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:33:08,109 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:33:08,109 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:33:08,109 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:33:08,109 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:33:08,110 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:33:08,110 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:33:08,110 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:33:08,112 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:33:08,112 [INFO] [device.py:send_hello] Sent nonce: b'\xa0\xe1mYP\xd6\xea]\r\x8a\xf8\xedw\x9cp\x08'
2025-06-08 19:33:08,112 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:33:08,112 [INFO] [server.py:<module>] Received nonce: b'\xa0\xe1mYP\xd6\xea]\r\x8a\xf8\xedw\x9cp\x08'
2025-06-08 19:33:08,112 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:33:08,112 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:33:08,113 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:33:08,113 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:33:08,114 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:33:08,114 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:33:08,114 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:33:08,114 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:33:08,114 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:33:08,114 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:33:08,114 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:33:08,114 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:33:08,116 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:33:08,117 [INFO] [device.py:recv_hello] Received nonce: b'\xda\x16bc\xba\xc2%3M\xe1,\xcd\xe4Q\xe6\x14'
2025-06-08 19:33:08,117 [INFO] [server.py:send_hello] Sent nonce: b'\xda\x16bc\xba\xc2%3M\xe1,\xcd\xe4Q\xe6\x14'
2025-06-08 19:33:08,117 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:33:08,117 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:33:08,118 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:33:08,118 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:33:08,118 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:33:08,118 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:33:08,118 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:33:08,118 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:33:08,118 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:33:08,119 [INFO] [server.py:<module>] Received pre-master secret: b';\xe6n\x169\xdd\xaa\x99\xc2<\xc3\xec\xac\x0eI\xa7\xb9\xcd\x08\x14\xe7\x95\xd3\xac\xaa\xc9\xe8\xc4\xceu\xa5\x15'
2025-06-08 19:33:08,119 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:33:08,120 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b"\x02\xf9\xe6C\x14'\xb0)Qqz\xf7|G?I", 'server_enc_key': b'S\x05q(T\xf0\xb0#\xc5\xf2\x9c\xcb\r\xcbY\x92', 'client_mac_key': b'\x13\xf4\x89bU\x82\x89\x01\xa7\x98a\xddA\x9b7\x86', 'server_mac_key': b'1\x03\x06\xfe\x927\x84\xba\xa9=\x97){p\xa2\x94', 'iv': b'\xe3\xbcF\xa6\\\xd6\x14@_?\x92\x8d5Ci\xd5'}
2025-06-08 19:33:08,120 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:33:08,121 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:33:08,121 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b"\x02\xf9\xe6C\x14'\xb0)Qqz\xf7|G?I", 'server_enc_key': b'S\x05q(T\xf0\xb0#\xc5\xf2\x9c\xcb\r\xcbY\x92', 'client_mac_key': b'\x13\xf4\x89bU\x82\x89\x01\xa7\x98a\xddA\x9b7\x86', 'server_mac_key': b'1\x03\x06\xfe\x927\x84\xba\xa9=\x97){p\xa2\x94', 'iv': b'\xe3\xbcF\xa6\\\xd6\x14@_?\x92\x8d5Ci\xd5'}
2025-06-08 19:33:08,121 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:33:08,121 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:33:08,121 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:33:08,121 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:33:08,121 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:33:08,121 [INFO] [device.py:send_secure_text] Sent encrypted message
2025-06-08 19:33:46,580 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:33:46,581 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 190, in send_secure_text
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 19:33:48,876 [INFO] [server.py:<module>] Server starting
2025-06-08 19:33:49,998 [INFO] [server.py:<module>] Server starting
2025-06-08 19:33:54,556 [INFO] [server.py:<module>] Server starting
2025-06-08 19:33:56,111 [INFO] [server.py:<module>] Server starting
2025-06-08 19:43:18,460 [INFO] [server.py:<module>] Server starting
2025-06-08 19:43:18,529 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:43:21,718 [INFO] [device.py:<module>] Device started
2025-06-08 19:43:21,786 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:43:21,786 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:43:21,786 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60863)
2025-06-08 19:43:21,786 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:43:21,786 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:43:21,786 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:43:21,786 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:43:21,786 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:43:21,786 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:43:21,787 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:43:21,787 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:43:21,787 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:43:21,787 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:43:21,787 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:43:21,787 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:43:21,787 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:43:21,787 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:43:21,788 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:43:21,789 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:43:21,789 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:43:21,791 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:43:21,791 [INFO] [device.py:send_hello] Sent nonce: b'@\t\xd2\x98\xbbBE\xe044\xe8\x02\x14\x80`\xa2'
2025-06-08 19:43:21,791 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:43:21,791 [INFO] [server.py:<module>] Received nonce: b'@\t\xd2\x98\xbbBE\xe044\xe8\x02\x14\x80`\xa2'
2025-06-08 19:43:21,791 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:43:21,792 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:43:21,792 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:43:21,792 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:43:21,793 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:43:21,793 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:43:21,793 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:43:21,793 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:43:21,793 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:43:21,793 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:43:21,793 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:43:21,793 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:43:21,796 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:43:21,796 [INFO] [server.py:send_hello] Sent nonce: b'"xJ\xa0\x8e~\'P\x18q\xb1\xdcd\xef$\xfb'
2025-06-08 19:43:21,796 [INFO] [device.py:recv_hello] Received nonce: b'"xJ\xa0\x8e~\'P\x18q\xb1\xdcd\xef$\xfb'
2025-06-08 19:43:21,796 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:43:21,796 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:43:21,797 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:43:21,797 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:43:21,797 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:43:21,797 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:43:21,797 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:43:21,797 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:43:21,797 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:43:21,798 [INFO] [server.py:<module>] Received pre-master secret: b'\xa4\x92s\x1fn\xf0?\xa2/f^\xa3H\xbf\\\x0f\xe3\xbd*\xd1\xb4\x92\xfe\x0b\xc5\x08\x8f\x90\xf9\x1e\xe5:'
2025-06-08 19:43:21,798 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:43:21,798 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'K\n\xf1\xb9W\xfe\xf0\x81\x02b88)\xa45\x16', 'server_enc_key': b'TGu\x06\xc6\xaa\xc3\x00\x08H\x16\xe6?\xb2\x92\xa9', 'client_mac_key': b'\xfc\xd1\x83\xf1\x00\x9a\xc1\xb2-\xb5.R\x9c\x88\xbcv', 'server_mac_key': b'm%]\x07\xb6\xef\xccz\xb6\xe3\x8e \xb3\xedF\x96', 'iv': b'\x04\x05K\x0e@\xe9\xb5U\x98\xa1\xd0\xb4<#\x1d`'}
2025-06-08 19:43:21,798 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:43:21,799 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:43:21,800 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'K\n\xf1\xb9W\xfe\xf0\x81\x02b88)\xa45\x16', 'server_enc_key': b'TGu\x06\xc6\xaa\xc3\x00\x08H\x16\xe6?\xb2\x92\xa9', 'client_mac_key': b'\xfc\xd1\x83\xf1\x00\x9a\xc1\xb2-\xb5.R\x9c\x88\xbcv', 'server_mac_key': b'm%]\x07\xb6\xef\xccz\xb6\xe3\x8e \xb3\xedF\x96', 'iv': b'\x04\x05K\x0e@\xe9\xb5U\x98\xa1\xd0\xb4<#\x1d`'}
2025-06-08 19:43:21,800 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:43:21,800 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:43:21,800 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:43:21,800 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:43:21,800 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:43:21,800 [INFO] [device.py:send_secure_text] Sent encrypted message
2025-06-08 19:45:23,002 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:45:23,003 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 190, in send_secure_text
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 19:45:24,432 [INFO] [server.py:<module>] Server starting
2025-06-08 19:48:34,585 [INFO] [server.py:<module>] Server starting
2025-06-08 19:48:34,653 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:48:36,523 [INFO] [device.py:<module>] Device started
2025-06-08 19:48:36,590 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:48:36,590 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:48:36,590 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60915)
2025-06-08 19:48:36,590 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:48:36,590 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:48:36,591 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:48:36,591 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:48:36,591 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:48:36,591 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:48:36,591 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:48:36,591 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:48:36,591 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:48:36,591 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:48:36,591 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:48:36,591 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:48:36,591 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:48:36,591 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:48:36,594 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:48:36,595 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:48:36,595 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:48:36,597 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:48:36,597 [INFO] [device.py:send_hello] Sent nonce: b'n\xae_\x1d\xd3%\x9f\rC\xc4\xb1v\x1b(\xa1\xec'
2025-06-08 19:48:36,597 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:48:36,597 [INFO] [server.py:<module>] Received nonce: b'n\xae_\x1d\xd3%\x9f\rC\xc4\xb1v\x1b(\xa1\xec'
2025-06-08 19:48:36,597 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:48:36,597 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:48:36,597 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:48:36,597 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:48:36,598 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:48:36,598 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:48:36,598 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:48:36,598 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:48:36,598 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:48:36,599 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:48:36,599 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:48:36,599 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:48:36,601 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:48:36,601 [INFO] [server.py:send_hello] Sent nonce: b'\x0b\x0b\x08\xc6V\x0f\x8d\xaa\xfa\x8f\xd3l\xb8\x81\x92\xef'
2025-06-08 19:48:36,601 [INFO] [device.py:recv_hello] Received nonce: b'\x0b\x0b\x08\xc6V\x0f\x8d\xaa\xfa\x8f\xd3l\xb8\x81\x92\xef'
2025-06-08 19:48:36,601 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:48:36,602 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:48:36,602 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:48:36,603 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:48:36,603 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:48:36,603 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:48:36,603 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:48:36,603 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:48:36,603 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:48:36,604 [INFO] [server.py:<module>] Received pre-master secret: b'J\xeb\xb75\xc9H\xad\xd2.a$n\xa5\xf0\xd1\xb3\x168\xb3\x19\x8euu\x08p\xf6\xc8\xc7\x10m\x0c\x14'
2025-06-08 19:48:36,604 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:48:36,604 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\xe0E\xc8]\x02\xe89\xf3\xd6\x9a1\xdepn\x02\xc6', 'server_enc_key': b'\xdd\xed\xd8C\xe1n\x1b\xdc\xa0N.2\xf9\xe0\xcb-', 'client_mac_key': b'\x98\xe1.\x13e#\x0e6e\xbb7\x0b\x1f\xeb\xf6A', 'server_mac_key': b'\xf2o\x87\x17\xae7\xc6\x9c\xd1\x8a\xa33j\xfeSh', 'iv': b'\xd49\xe2WLB\xd3\xb4\xc9o\xd3DK\x96\xf0\x97'}
2025-06-08 19:48:36,604 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:48:36,605 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:48:36,605 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\xe0E\xc8]\x02\xe89\xf3\xd6\x9a1\xdepn\x02\xc6', 'server_enc_key': b'\xdd\xed\xd8C\xe1n\x1b\xdc\xa0N.2\xf9\xe0\xcb-', 'client_mac_key': b'\x98\xe1.\x13e#\x0e6e\xbb7\x0b\x1f\xeb\xf6A', 'server_mac_key': b'\xf2o\x87\x17\xae7\xc6\x9c\xd1\x8a\xa33j\xfeSh', 'iv': b'\xd49\xe2WLB\xd3\xb4\xc9o\xd3DK\x96\xf0\x97'}
2025-06-08 19:48:36,605 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:48:36,605 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:48:36,605 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:48:36,605 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:48:36,605 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:48:36,606 [INFO] [device.py:send_secure_text] Sent encrypted message
2025-06-08 19:48:36,606 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:48:36,606 [INFO] [server.py:recv_exact] Receiving exactly 48 bytes...
2025-06-08 19:48:36,606 [INFO] [server.py:recv_exact] Received 48 bytes successfully
2025-06-08 19:48:36,606 [ERROR] [server.py:recv_secure_text] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 143, in decrypt_aes_with_hmac
    h.verify(mac)
    ~~~~~~~~^^^^^
cryptography.exceptions.InvalidSignature: Signature did not match digest.
2025-06-08 19:48:36,607 [ERROR] [server.py:<module>] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 206, in <module>
    decrypted_message = recv_secure_text(client, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 109, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 143, in decrypt_aes_with_hmac
    h.verify(mac)
    ~~~~~~~~^^^^^
cryptography.exceptions.InvalidSignature: Signature did not match digest.
2025-06-08 19:48:36,607 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 214, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 206, in <module>
    decrypted_message = recv_secure_text(client, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 109, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 143, in decrypt_aes_with_hmac
    h.verify(mac)
    ~~~~~~~~^^^^^
cryptography.exceptions.InvalidSignature: Signature did not match digest.
2025-06-08 19:48:36,608 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:48:36,608 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 191, in send_secure_text
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 19:50:27,596 [INFO] [server.py:<module>] Server starting
2025-06-08 19:50:27,663 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:50:29,728 [INFO] [device.py:<module>] Device started
2025-06-08 19:50:29,795 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:50:29,795 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:50:29,795 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60929)
2025-06-08 19:50:29,795 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:50:29,795 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:50:29,795 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:50:29,795 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:50:29,795 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:50:29,795 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:50:29,796 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:50:29,796 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:50:29,796 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:50:29,796 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:50:29,796 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:50:29,796 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:50:29,796 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:50:29,796 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:50:29,798 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:50:29,799 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:50:29,799 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:50:29,801 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:50:29,801 [INFO] [device.py:send_hello] Sent nonce: b'O*\xfd\xdf\x00\xf1af\x94y8Z\x92\x10\xe1!'
2025-06-08 19:50:29,801 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:50:29,801 [INFO] [server.py:<module>] Received nonce: b'O*\xfd\xdf\x00\xf1af\x94y8Z\x92\x10\xe1!'
2025-06-08 19:50:29,801 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:50:29,801 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:50:29,801 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:50:29,802 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:50:29,802 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:50:29,802 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:50:29,802 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:50:29,802 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:50:29,802 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:50:29,803 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:50:29,803 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:50:29,803 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:50:29,805 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:50:29,805 [INFO] [server.py:send_hello] Sent nonce: b"\xe3\x8a\x95\xf0\xff\xa01?p\x91\x01\xa3'$\xd6%"
2025-06-08 19:50:29,805 [INFO] [device.py:recv_hello] Received nonce: b"\xe3\x8a\x95\xf0\xff\xa01?p\x91\x01\xa3'$\xd6%"
2025-06-08 19:50:29,806 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:50:29,806 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:50:29,807 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:50:29,807 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:50:29,807 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:50:29,807 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:50:29,807 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:50:29,807 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:50:29,807 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:50:29,808 [INFO] [server.py:<module>] Received pre-master secret: b'V\x7f\x19<G\xf7\xeff\x9b\xae\x02\x87\xf1\xbd\xd3Y\x80U\x92q&"\xd6\x1c\xa4l\x9dCQFa,'
2025-06-08 19:50:29,808 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:50:29,808 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\x90\x139\x9d?\xdd\xb7\xd3\x01\xac\xe7\x02&\x18u\x1b', 'server_enc_key': b'\x17+zZ89\xdeGb\xec\x1du\xc1\x88\x11\x8c', 'client_mac_key': b'_\xc3Xh\xc3\xa2^h\x07\xe2as\xed\xcc\x9fA', 'server_mac_key': b'\xa2\xa7\xe84\xf9\xe0+\xc6\xc3u\xd6\xeb\x9a<\xe0\xc0', 'iv': b'\xeb*\x98\x84/O\xb4\xa3\xf4\xa4\x0b6\x19\x0f&\xf7'}
2025-06-08 19:50:29,808 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:50:29,810 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:50:29,810 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\x90\x139\x9d?\xdd\xb7\xd3\x01\xac\xe7\x02&\x18u\x1b', 'server_enc_key': b'\x17+zZ89\xdeGb\xec\x1du\xc1\x88\x11\x8c', 'client_mac_key': b'_\xc3Xh\xc3\xa2^h\x07\xe2as\xed\xcc\x9fA', 'server_mac_key': b'\xa2\xa7\xe84\xf9\xe0+\xc6\xc3u\xd6\xeb\x9a<\xe0\xc0', 'iv': b'\xeb*\x98\x84/O\xb4\xa3\xf4\xa4\x0b6\x19\x0f&\xf7'}
2025-06-08 19:50:29,810 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:50:29,810 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:50:29,810 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:50:29,810 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:50:29,810 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:50:29,811 [INFO] [device.py:send_secure_text] Sent encrypted message
2025-06-08 19:50:29,811 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:50:29,811 [INFO] [server.py:recv_exact] Receiving exactly 48 bytes...
2025-06-08 19:50:29,811 [INFO] [server.py:recv_exact] Received 48 bytes successfully
2025-06-08 19:50:29,811 [ERROR] [server.py:recv_secure_text] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 147, in decrypt_aes_with_hmac
    plaintext = decrypter.update(padded_message) + decrypter.finalize()
                                 ^^^^^^^^^^^^^^
UnboundLocalError: cannot access local variable 'padded_message' where it is not associated with a value
2025-06-08 19:50:29,812 [ERROR] [server.py:<module>] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 206, in <module>
    decrypted_message = recv_secure_text(client, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 109, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 147, in decrypt_aes_with_hmac
    plaintext = decrypter.update(padded_message) + decrypter.finalize()
                                 ^^^^^^^^^^^^^^
UnboundLocalError: cannot access local variable 'padded_message' where it is not associated with a value
2025-06-08 19:50:29,812 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 214, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 206, in <module>
    decrypted_message = recv_secure_text(client, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 109, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 147, in decrypt_aes_with_hmac
    plaintext = decrypter.update(padded_message) + decrypter.finalize()
                                 ^^^^^^^^^^^^^^
UnboundLocalError: cannot access local variable 'padded_message' where it is not associated with a value
2025-06-08 19:50:29,813 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:50:29,813 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 191, in send_secure_text
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 19:52:41,745 [INFO] [server.py:<module>] Server starting
2025-06-08 19:52:41,813 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:52:43,516 [INFO] [device.py:<module>] Device started
2025-06-08 19:52:43,583 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:52:43,583 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:52:43,583 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60945)
2025-06-08 19:52:43,583 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:52:43,583 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:52:43,583 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:52:43,583 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:52:43,583 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:52:43,583 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:52:43,584 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:52:43,584 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:52:43,584 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:52:43,584 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:52:43,584 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:52:43,584 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:52:43,584 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:52:43,584 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:52:43,587 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:52:43,589 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:52:43,589 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:52:43,591 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:52:43,591 [INFO] [device.py:send_hello] Sent nonce: b'&+\x93\xdc7\xd3|\xbe^f\xa0\x14L\x86?\xfe'
2025-06-08 19:52:43,591 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:52:43,591 [INFO] [server.py:<module>] Received nonce: b'&+\x93\xdc7\xd3|\xbe^f\xa0\x14L\x86?\xfe'
2025-06-08 19:52:43,591 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:52:43,591 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:52:43,591 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:52:43,591 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:52:43,592 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:52:43,592 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:52:43,592 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:52:43,592 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:52:43,592 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:52:43,592 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:52:43,592 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:52:43,593 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:52:43,594 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:52:43,595 [INFO] [server.py:send_hello] Sent nonce: b'%\xba\xf2>\x02E\xb5Y\x0eE,1hmUk'
2025-06-08 19:52:43,595 [INFO] [device.py:recv_hello] Received nonce: b'%\xba\xf2>\x02E\xb5Y\x0eE,1hmUk'
2025-06-08 19:52:43,595 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:52:43,595 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:52:43,596 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:52:43,596 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:52:43,596 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:52:43,596 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:52:43,596 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:52:43,596 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:52:43,596 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:52:43,598 [INFO] [server.py:<module>] Received pre-master secret: b'\xf8<\xc2&xF\x8b\xa9&\xf0E\xf4\x11\x04cp\x87\xe8\xb9\xaf\x84\xaay \xd0\n\x95K\x8cNO\x9c'
2025-06-08 19:52:43,598 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:52:43,598 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\x8c\x16{\xaf (WY\x89?\x19\xd2)\xe7\x9c\x8e', 'server_enc_key': b'lZ\xa7\xd6\x1ct\t(\xc6(\n\x0bO\x16\x00\x83', 'client_mac_key': b'\x89\x93o\xa1K\xa2\xf6\x16\x18T\x9a\x89\xcc\xa2\xcdx', 'server_mac_key': b'83\xea\xbb\xc3"{\x11\xc0\xe8\x18\xbd\xd6}\xda\xb3', 'iv': b'#c\x07\x9bFM\x91\x95a\xc8\tn\xb3\xf0x\x9f'}
2025-06-08 19:52:43,598 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:52:43,599 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:52:43,599 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\x8c\x16{\xaf (WY\x89?\x19\xd2)\xe7\x9c\x8e', 'server_enc_key': b'lZ\xa7\xd6\x1ct\t(\xc6(\n\x0bO\x16\x00\x83', 'client_mac_key': b'\x89\x93o\xa1K\xa2\xf6\x16\x18T\x9a\x89\xcc\xa2\xcdx', 'server_mac_key': b'83\xea\xbb\xc3"{\x11\xc0\xe8\x18\xbd\xd6}\xda\xb3', 'iv': b'#c\x07\x9bFM\x91\x95a\xc8\tn\xb3\xf0x\x9f'}
2025-06-08 19:52:43,599 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:52:43,599 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:52:43,599 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:52:43,599 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:52:43,599 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:52:43,600 [INFO] [device.py:send_secure_text] Sent encrypted message
2025-06-08 19:52:43,600 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:52:43,600 [INFO] [server.py:recv_exact] Receiving exactly 48 bytes...
2025-06-08 19:52:43,600 [INFO] [server.py:recv_exact] Received 48 bytes successfully
2025-06-08 19:52:43,601 [ERROR] [server.py:recv_secure_text] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 151, in decrypt_aes_with_hmac
    unpadder = padding.PKCS7(128).unpadder()
               ^^^^^^^^^^^^^
AttributeError: module 'cryptography.hazmat.primitives.asymmetric.padding' has no attribute 'PKCS7'
2025-06-08 19:52:43,602 [ERROR] [server.py:<module>] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 206, in <module>
    decrypted_message = recv_secure_text(client, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 109, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 151, in decrypt_aes_with_hmac
    unpadder = padding.PKCS7(128).unpadder()
               ^^^^^^^^^^^^^
AttributeError: module 'cryptography.hazmat.primitives.asymmetric.padding' has no attribute 'PKCS7'
2025-06-08 19:52:43,602 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 214, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 206, in <module>
    decrypted_message = recv_secure_text(client, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 109, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 151, in decrypt_aes_with_hmac
    unpadder = padding.PKCS7(128).unpadder()
               ^^^^^^^^^^^^^
AttributeError: module 'cryptography.hazmat.primitives.asymmetric.padding' has no attribute 'PKCS7'
2025-06-08 19:52:43,603 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:52:43,603 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 191, in send_secure_text
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 19:53:28,179 [INFO] [server.py:<module>] Server starting
2025-06-08 19:53:28,248 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:53:29,732 [INFO] [device.py:<module>] Device started
2025-06-08 19:53:29,800 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:53:29,800 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60950)
2025-06-08 19:53:29,800 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:53:29,800 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:53:29,800 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:53:29,800 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:53:29,800 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:53:29,800 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:53:29,801 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:53:29,801 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:53:29,801 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:53:29,801 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:53:29,801 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:53:29,801 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:53:29,801 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:53:29,801 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:53:29,801 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:53:29,804 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:53:29,806 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:53:29,806 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:53:29,807 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:53:29,807 [INFO] [device.py:send_hello] Sent nonce: b'\xf1y\xd4\xce\x84W\x96\xeeH\xfd\xb9\xb6\xf5\xc4`\xdc'
2025-06-08 19:53:29,807 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:53:29,807 [INFO] [server.py:<module>] Received nonce: b'\xf1y\xd4\xce\x84W\x96\xeeH\xfd\xb9\xb6\xf5\xc4`\xdc'
2025-06-08 19:53:29,808 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:53:29,808 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:53:29,808 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:53:29,808 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:53:29,809 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:53:29,809 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:53:29,809 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:53:29,809 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:53:29,809 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:53:29,809 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:53:29,810 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:53:29,810 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:53:29,812 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:53:29,812 [INFO] [server.py:send_hello] Sent nonce: b'\x95\x1c\x8c\x80p\xc3\x90\xc5\x004\xef0\x88\xa2\xadO'
2025-06-08 19:53:29,812 [INFO] [device.py:recv_hello] Received nonce: b'\x95\x1c\x8c\x80p\xc3\x90\xc5\x004\xef0\x88\xa2\xadO'
2025-06-08 19:53:29,812 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:53:29,813 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:53:29,814 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:53:29,814 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:53:29,814 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:53:29,814 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:53:29,814 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:53:29,814 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:53:29,814 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:53:29,815 [INFO] [server.py:<module>] Received pre-master secret: b'\xb3G6\xf9\xbd\xd0q\xcb\x00\xfb\x9az\xben\x1c\xa9L\x84\xb7\x14\x14\x8aS\xbc}2#9\xe1Uzo'
2025-06-08 19:53:29,815 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:53:29,815 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\xa3\xc0Q}\xb4\x12\xef\x13\x92\xa9\n@\xe3\xdc|\x08', 'server_enc_key': b'zos\xf0\x9f\x9b\x85\x17\xb5K\xb6s\xb2Af\xc2', 'client_mac_key': b"zz=\xa3\x17g\x0e\x81h\xa6\xf6'\xd7\x84\x87\x9a", 'server_mac_key': b'\xd2\xd7\xde\x93\x1f\xbe\xe8\xdf\\\xe7\x81\x14\x0f{\xf4\x9b', 'iv': b'/\xbf\xd7\xdfg\xdf\xdc^1\x90\xb9\x06;@&S'}
2025-06-08 19:53:29,815 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:53:29,816 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:53:29,816 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\xa3\xc0Q}\xb4\x12\xef\x13\x92\xa9\n@\xe3\xdc|\x08', 'server_enc_key': b'zos\xf0\x9f\x9b\x85\x17\xb5K\xb6s\xb2Af\xc2', 'client_mac_key': b"zz=\xa3\x17g\x0e\x81h\xa6\xf6'\xd7\x84\x87\x9a", 'server_mac_key': b'\xd2\xd7\xde\x93\x1f\xbe\xe8\xdf\\\xe7\x81\x14\x0f{\xf4\x9b', 'iv': b'/\xbf\xd7\xdfg\xdf\xdc^1\x90\xb9\x06;@&S'}
2025-06-08 19:53:29,816 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:53:29,816 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:53:29,816 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:53:29,816 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:53:29,816 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:53:29,818 [INFO] [device.py:send_secure_text] Sent encrypted message
2025-06-08 19:53:29,818 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:53:29,818 [INFO] [server.py:recv_exact] Receiving exactly 48 bytes...
2025-06-08 19:53:29,818 [INFO] [server.py:recv_exact] Received 48 bytes successfully
2025-06-08 19:53:29,818 [ERROR] [server.py:recv_secure_text] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 152, in decrypt_aes_with_hmac
    plaintext = unpadder.update(padded) + unpadder.finalize()
                                          ~~~~~~~~~~~~~~~~~^^
ValueError: Invalid padding bytes.
2025-06-08 19:53:29,819 [ERROR] [server.py:<module>] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 206, in <module>
    decrypted_message = recv_secure_text(client, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 109, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 152, in decrypt_aes_with_hmac
    plaintext = unpadder.update(padded) + unpadder.finalize()
                                          ~~~~~~~~~~~~~~~~~^^
ValueError: Invalid padding bytes.
2025-06-08 19:53:29,820 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 214, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 206, in <module>
    decrypted_message = recv_secure_text(client, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 109, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 152, in decrypt_aes_with_hmac
    plaintext = unpadder.update(padded) + unpadder.finalize()
                                          ~~~~~~~~~~~~~~~~~^^
ValueError: Invalid padding bytes.
2025-06-08 19:53:29,820 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:53:29,820 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 191, in send_secure_text
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 19:54:13,961 [INFO] [server.py:<module>] Server starting
2025-06-08 19:54:14,029 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:54:16,185 [INFO] [device.py:<module>] Device started
2025-06-08 19:54:16,252 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:54:16,252 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:54:16,252 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60956)
2025-06-08 19:54:16,252 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:54:16,252 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:54:16,252 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:54:16,252 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:54:16,252 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:54:16,252 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:54:16,253 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:54:16,253 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:54:16,253 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:54:16,253 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:54:16,253 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:54:16,253 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:54:16,253 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:54:16,253 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:54:16,256 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:54:16,257 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:54:16,257 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:54:16,258 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:54:16,259 [INFO] [device.py:send_hello] Sent nonce: b'\xa6YR I\xd4\x04X\x90S\xecY\xc4\xb5\xbf\xa2'
2025-06-08 19:54:16,259 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:54:16,259 [INFO] [server.py:<module>] Received nonce: b'\xa6YR I\xd4\x04X\x90S\xecY\xc4\xb5\xbf\xa2'
2025-06-08 19:54:16,259 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:54:16,259 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:54:16,259 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:54:16,259 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:54:16,260 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:54:16,260 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:54:16,260 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:54:16,260 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:54:16,260 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:54:16,260 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:54:16,261 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:54:16,261 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:54:16,263 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:54:16,263 [INFO] [server.py:send_hello] Sent nonce: b'\xb2@\x9fk\x0f\xd1\x85\x02\x80O\x1d\xd2\x1dH\x85\x16'
2025-06-08 19:54:16,263 [INFO] [device.py:recv_hello] Received nonce: b'\xb2@\x9fk\x0f\xd1\x85\x02\x80O\x1d\xd2\x1dH\x85\x16'
2025-06-08 19:54:16,263 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:54:16,264 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:54:16,264 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:54:16,264 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:54:16,264 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:54:16,264 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:54:16,264 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:54:16,265 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:54:16,265 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:54:16,266 [INFO] [server.py:<module>] Received pre-master secret: b'\xc9\xc4;5\x10\x99\xafA\xd9\x90\xad\x89\x87"\xb7\xc9\xf0(\xc49\xfe0\x8a\x04\x17\xf17\xa0\xd5|L@'
2025-06-08 19:54:16,266 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:54:16,266 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'I\xad\xca\x97\xbdl\x80D\xec\xdbM\x8e~\xa5\x95\x92', 'server_enc_key': b'\x12\x19\x8e\xcan9\xb09\x8d\xf4\xd6IE\xb2\x15\xd8', 'client_mac_key': b'O\xac\xb9\xb3\x96\xbe\xc6\xb7t\xa7\xe5m2}I\x15', 'server_mac_key': b'Bu\xb2\x03\xaa\x8eK^\x11\x80\xd8c>\x1d)C', 'iv': b'\x03\x9d\xb8\x97H\xf6`\xd3\x82]>\x11;\xe8\x17x'}
2025-06-08 19:54:16,266 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:54:16,267 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:54:16,267 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'I\xad\xca\x97\xbdl\x80D\xec\xdbM\x8e~\xa5\x95\x92', 'server_enc_key': b'\x12\x19\x8e\xcan9\xb09\x8d\xf4\xd6IE\xb2\x15\xd8', 'client_mac_key': b'O\xac\xb9\xb3\x96\xbe\xc6\xb7t\xa7\xe5m2}I\x15', 'server_mac_key': b'Bu\xb2\x03\xaa\x8eK^\x11\x80\xd8c>\x1d)C', 'iv': b'\x03\x9d\xb8\x97H\xf6`\xd3\x82]>\x11;\xe8\x17x'}
2025-06-08 19:54:16,267 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:54:16,267 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:54:16,267 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:54:16,268 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:54:16,268 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:54:16,269 [INFO] [device.py:send_secure_text] Sent encrypted message
2025-06-08 19:54:16,269 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:54:16,269 [INFO] [server.py:recv_exact] Receiving exactly 48 bytes...
2025-06-08 19:54:16,269 [INFO] [server.py:recv_exact] Received 48 bytes successfully
2025-06-08 19:54:16,269 [ERROR] [server.py:recv_secure_text] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 152, in decrypt_aes_with_hmac
    plaintext = unpadder.update(padded) + unpadder
                ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
TypeError: can't concat builtins.PKCS7UnpaddingContext to bytes
2025-06-08 19:54:16,270 [ERROR] [server.py:<module>] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 206, in <module>
    decrypted_message = recv_secure_text(client, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 109, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 152, in decrypt_aes_with_hmac
    plaintext = unpadder.update(padded) + unpadder
                ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
TypeError: can't concat builtins.PKCS7UnpaddingContext to bytes
2025-06-08 19:54:16,271 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 214, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 206, in <module>
    decrypted_message = recv_secure_text(client, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 109, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 152, in decrypt_aes_with_hmac
    plaintext = unpadder.update(padded) + unpadder
                ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
TypeError: can't concat builtins.PKCS7UnpaddingContext to bytes
2025-06-08 19:54:16,271 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:54:16,271 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 191, in send_secure_text
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 19:55:24,409 [INFO] [server.py:<module>] Server starting
2025-06-08 19:55:24,477 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:55:26,010 [INFO] [device.py:<module>] Device started
2025-06-08 19:55:26,078 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:55:26,078 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:55:26,078 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60972)
2025-06-08 19:55:26,078 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:55:26,078 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:55:26,078 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:55:26,078 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:55:26,078 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:55:26,078 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:55:26,079 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:55:26,079 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:55:26,079 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:55:26,079 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:55:26,079 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:55:26,079 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:55:26,079 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:55:26,079 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:55:26,081 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:55:26,083 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:55:26,083 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:55:26,084 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:55:26,084 [INFO] [device.py:send_hello] Sent nonce: b'6\xb9"lz\xea9\xb1F\x9c\xe7\xf7\x00K?\x0c'
2025-06-08 19:55:26,084 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:55:26,084 [INFO] [server.py:<module>] Received nonce: b'6\xb9"lz\xea9\xb1F\x9c\xe7\xf7\x00K?\x0c'
2025-06-08 19:55:26,084 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:55:26,085 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:55:26,085 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:55:26,085 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:55:26,086 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:55:26,086 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:55:26,086 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:55:26,086 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:55:26,086 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:55:26,086 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:55:26,087 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:55:26,087 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:55:26,089 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:55:26,089 [INFO] [server.py:send_hello] Sent nonce: b'\x8a\x90i\r\xc7\xcf\x1f/j(\xe4\xfaaq\xb8\xcf'
2025-06-08 19:55:26,089 [INFO] [device.py:recv_hello] Received nonce: b'\x8a\x90i\r\xc7\xcf\x1f/j(\xe4\xfaaq\xb8\xcf'
2025-06-08 19:55:26,089 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:55:26,089 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:55:26,090 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:55:26,090 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:55:26,090 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:55:26,090 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:55:26,090 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:55:26,091 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:55:26,091 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:55:26,092 [INFO] [server.py:<module>] Received pre-master secret: b"\t\xdf\x8a\x07\xf5B\xb8nJ\xab\xd1X'\xabv\x02Iv\x9ar\xd3\x8a\xc0W\xa4\x1c>\x1d\xeb\xb1\x9a\xfe"
2025-06-08 19:55:26,092 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:55:26,092 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\xb1b|\x16\xea\xe10\x8f\xacP\xc7R_\xa8`\xd2', 'server_enc_key': b'\x899XnJ\xc1\xd2f\xf5\x8e\xc6L\xb6\x00\xaf\x9f', 'client_mac_key': b'\x7fj)U\xc60bSZ\xf7\xedw\x04\x06\xcf\x82', 'server_mac_key': b'R\xef\xbaOw\xab\x88\xd6\xf2\xaf\xe7\x9e@\xf6\x8b\xed', 'iv': b'\x11\xd5\xc7t\x08\xee\xad\x13 \x98\xed2N\xd0\xeb:'}
2025-06-08 19:55:26,092 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:55:26,093 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:55:26,093 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\xb1b|\x16\xea\xe10\x8f\xacP\xc7R_\xa8`\xd2', 'server_enc_key': b'\x899XnJ\xc1\xd2f\xf5\x8e\xc6L\xb6\x00\xaf\x9f', 'client_mac_key': b'\x7fj)U\xc60bSZ\xf7\xedw\x04\x06\xcf\x82', 'server_mac_key': b'R\xef\xbaOw\xab\x88\xd6\xf2\xaf\xe7\x9e@\xf6\x8b\xed', 'iv': b'\x11\xd5\xc7t\x08\xee\xad\x13 \x98\xed2N\xd0\xeb:'}
2025-06-08 19:55:26,093 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:55:26,093 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:55:26,093 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:55:26,093 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:55:26,093 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:55:26,094 [INFO] [device.py:send_secure_text] Sent encrypted message
2025-06-08 19:55:26,094 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:55:26,094 [INFO] [server.py:recv_exact] Receiving exactly 48 bytes...
2025-06-08 19:55:26,094 [INFO] [server.py:recv_exact] Received 48 bytes successfully
2025-06-08 19:55:26,095 [ERROR] [server.py:recv_secure_text] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 152, in decrypt_aes_with_hmac
    plaintext = unpadder.update(padded) + unpadder.finalize()
                                          ~~~~~~~~~~~~~~~~~^^
ValueError: Invalid padding bytes.
2025-06-08 19:55:26,096 [ERROR] [server.py:<module>] Failed to receive secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 206, in <module>
    decrypted_message = recv_secure_text(client, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 109, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 152, in decrypt_aes_with_hmac
    plaintext = unpadder.update(padded) + unpadder.finalize()
                                          ~~~~~~~~~~~~~~~~~^^
ValueError: Invalid padding bytes.
2025-06-08 19:55:26,096 [ERROR] [server.py:<module>] An error occurred during communication.
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 214, in <module>
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 206, in <module>
    decrypted_message = recv_secure_text(client, DERIVED_KEYS)
  File "/Users/omerfarukbulut/info_sec/server.py", line 109, in recv_secure_text
    raise e
  File "/Users/omerfarukbulut/info_sec/server.py", line 104, in recv_secure_text
    decrypted_message = decrypt_aes_with_hmac(encrypted_message, aes_key, mac_key, iv)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 152, in decrypt_aes_with_hmac
    plaintext = unpadder.update(padded) + unpadder.finalize()
                                          ~~~~~~~~~~~~~~~~~^^
ValueError: Invalid padding bytes.
2025-06-08 19:55:26,097 [INFO] [server.py:<module>] Server shut down
2025-06-08 19:55:26,097 [ERROR] [device.py:send_secure_text] Failed to send secure text
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 191, in send_secure_text
    ack_msg = decrypt_message(ack, private_key)
  File "/Users/omerfarukbulut/info_sec/rsa_keys.py", line 80, in decrypt_message
    raise ValueError(f"Encrypted message length is invalid. Got {len(encrypted_message)} bytes, expected 256 bytes.")
ValueError: Encrypted message length is invalid. Got 0 bytes, expected 256 bytes.
2025-06-08 19:56:03,433 [INFO] [server.py:<module>] Server starting
2025-06-08 19:56:03,503 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 19:56:05,222 [INFO] [device.py:<module>] Device started
2025-06-08 19:56:05,290 [INFO] [device.py:<module>] Connected to server
2025-06-08 19:56:05,290 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 19:56:05,290 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 60982)
2025-06-08 19:56:05,290 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:56:05,290 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:56:05,290 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 19:56:05,290 [INFO] [server.py:<module>] Expecting hello
2025-06-08 19:56:05,290 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 19:56:05,290 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:56:05,290 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:56:05,291 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:56:05,291 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:56:05,291 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 19:56:05,291 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 19:56:05,291 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 19:56:05,291 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 19:56:05,291 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 19:56:05,294 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 19:56:05,294 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 19:56:05,295 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 19:56:05,296 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:56:05,297 [INFO] [device.py:send_hello] Sent nonce: b'*\xdc\xba\x94\x07%CB\xa1\xa8\xc4\x02E\xe9\n\xc7'
2025-06-08 19:56:05,297 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 19:56:05,297 [INFO] [server.py:<module>] Received nonce: b'*\xdc\xba\x94\x07%CB\xa1\xa8\xc4\x02E\xe9\n\xc7'
2025-06-08 19:56:05,297 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:56:05,297 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 19:56:05,297 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 19:56:05,297 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 19:56:05,298 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 19:56:05,298 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 19:56:05,298 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 19:56:05,298 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 19:56:05,298 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 19:56:05,299 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:56:05,299 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 19:56:05,299 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 19:56:05,301 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 19:56:05,301 [INFO] [server.py:send_hello] Sent nonce: b'\xb2V38\xf1Y\x84.4\x97\xec\x17BB\x1e\xaa'
2025-06-08 19:56:05,301 [INFO] [device.py:recv_hello] Received nonce: b'\xb2V38\xf1Y\x84.4\x97\xec\x17BB\x1e\xaa'
2025-06-08 19:56:05,301 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 19:56:05,302 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 19:56:05,303 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 19:56:05,303 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:56:05,303 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:56:05,303 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 19:56:05,303 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 19:56:05,303 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 19:56:05,303 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 19:56:05,304 [INFO] [server.py:<module>] Received pre-master secret: b'\x19\x88\xfak\xe3\xb3*\x89\xce\xd2\x8a\xe0\xfb\x80*<\xd0\xf9\xc5\xaa\xbb\x87\xc4\xe9\'\x92"\xd1C\n\xe5\xd5'
2025-06-08 19:56:05,304 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:56:05,304 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'<\x94+\x98\xdb3\xd29\x96G\xc2\xedM\xa8\xab\xe4', 'server_enc_key': b'\xd3\x1e\x81\x9d4\x82\xfbd\xd5\x19\xed\xed\xfb\xb4\xfd\x82', 'client_mac_key': b'\x1d\x89F\xcd\xe8@e\xf9\xb9\xf9*:\xd3\xc2\x91\x1e', 'server_mac_key': b'\xb9\xeaR\xf5@\x85\x80\xc7^0D\xdaNU\xe9\xe5', 'iv': b'[y\xc2Yi\xde0\xe9\x1aR\xd2\xc9\xdc\x98P\x11'}
2025-06-08 19:56:05,304 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:56:05,305 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 19:56:05,305 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'<\x94+\x98\xdb3\xd29\x96G\xc2\xedM\xa8\xab\xe4', 'server_enc_key': b'\xd3\x1e\x81\x9d4\x82\xfbd\xd5\x19\xed\xed\xfb\xb4\xfd\x82', 'client_mac_key': b'\x1d\x89F\xcd\xe8@e\xf9\xb9\xf9*:\xd3\xc2\x91\x1e', 'server_mac_key': b'\xb9\xeaR\xf5@\x85\x80\xc7^0D\xdaNU\xe9\xe5', 'iv': b'[y\xc2Yi\xde0\xe9\x1aR\xd2\xc9\xdc\x98P\x11'}
2025-06-08 19:56:05,305 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 19:56:05,305 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:56:05,305 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 19:56:05,305 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 19:56:05,305 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 19:56:05,306 [INFO] [device.py:send_secure_text] Sent encrypted message
2025-06-08 19:56:05,306 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 19:56:05,306 [INFO] [server.py:recv_exact] Receiving exactly 48 bytes...
2025-06-08 19:56:05,306 [INFO] [server.py:recv_exact] Received 48 bytes successfully
2025-06-08 19:56:05,306 [INFO] [server.py:recv_secure_text] Decrypted message: b'Hello, world!'
2025-06-08 19:56:05,307 [INFO] [server.py:<module>] Decrypted message: b'Hello, world!'
2025-06-08 19:56:05,307 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 19:56:05,307 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 19:56:05,308 [INFO] [device.py:send_secure_text] Server acknowledgement: SEC_TEXT_RECEIVED
2025-06-08 19:56:05,308 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 19:56:05,308 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 19:56:05,308 [INFO] [device.py:<module>] Device socket closed
2025-06-08 19:56:05,308 [INFO] [server.py:<module>] Received header: b'<ENDD>'
2025-06-08 19:56:05,308 [INFO] [server.py:<module>] Received end of file
2025-06-08 19:56:05,308 [INFO] [server.py:<module>] Server closed
2025-06-08 19:56:05,308 [INFO] [server.py:<module>] Server shut down
2025-06-08 22:02:41,467 [INFO] [server.py:<module>] Server starting
2025-06-08 22:02:41,536 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 22:02:45,475 [INFO] [device.py:<module>] Device started
2025-06-08 22:02:45,543 [INFO] [device.py:<module>] Connected to server
2025-06-08 22:02:45,543 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 22:02:45,543 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 62094)
2025-06-08 22:02:45,543 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:02:45,543 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:02:45,543 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 22:02:45,543 [INFO] [server.py:<module>] Expecting hello
2025-06-08 22:02:45,543 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 22:02:45,543 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 22:02:45,543 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 22:02:45,543 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 22:02:45,543 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 22:02:45,543 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 22:02:45,543 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 22:02:45,543 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 22:02:45,544 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 22:02:45,544 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 22:02:45,545 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 22:02:45,546 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 22:02:45,546 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 22:02:45,548 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 22:02:45,548 [INFO] [device.py:send_hello] Sent nonce: b'\x02\x99n\xbc\xc2\xac\xb0O\x02I\xe8!\t\x19\xc4X'
2025-06-08 22:02:45,548 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 22:02:45,548 [INFO] [server.py:<module>] Received nonce: b'\x02\x99n\xbc\xc2\xac\xb0O\x02I\xe8!\t\x19\xc4X'
2025-06-08 22:02:45,548 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 22:02:45,548 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 22:02:45,548 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 22:02:45,548 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 22:02:45,549 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 22:02:45,549 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 22:02:45,549 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 22:02:45,549 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 22:02:45,549 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 22:02:45,549 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 22:02:45,550 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 22:02:45,550 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 22:02:45,552 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 22:02:45,553 [INFO] [server.py:send_hello] Sent nonce: b'\xca\xaf\xfc:\xcc\xc5\xfd0\x1b,\n\xd2V2\xa4\xc9'
2025-06-08 22:02:45,553 [INFO] [device.py:recv_hello] Received nonce: b'\xca\xaf\xfc:\xcc\xc5\xfd0\x1b,\n\xd2V2\xa4\xc9'
2025-06-08 22:02:45,553 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 22:02:45,553 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 22:02:45,554 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 22:02:45,554 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:02:45,555 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:02:45,555 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 22:02:45,555 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 22:02:45,555 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 22:02:45,555 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 22:02:45,556 [INFO] [server.py:<module>] Received pre-master secret: b'\x06\x17\xb5\xad\xacO\x8b\xb4c\x06\x11\x07v*\x81(\xc7\x7f\x80\x82W\xa1N7\x0e5\xc2\xb9\x99E\xf4\xe8'
2025-06-08 22:02:45,556 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 22:02:45,556 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\xa0\xb6\xc7\xb7\xcd\x88\r\xbe\xd3\x0c-\xae\x16\x82\xe2\xa6', 'server_enc_key': b'>A\xf9K\xeeH\xc8\xa3\x99\xbf\\\xceA4\xc9\xd6', 'client_mac_key': b'\xe1\x1f\x15iA\xad)\xbc\xe1l#\x7f\xf9\x0f\x80)', 'server_mac_key': b'To)\x06N\xb0\xc5\x0e]\x8aL\x01$\xc7-\xd6', 'iv': b'\xf0\xa0A@\x97q \xbd\x00\x05\x12\xb5\x19d\xa0\x83'}
2025-06-08 22:02:45,556 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:02:45,557 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 22:02:45,557 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\xa0\xb6\xc7\xb7\xcd\x88\r\xbe\xd3\x0c-\xae\x16\x82\xe2\xa6', 'server_enc_key': b'>A\xf9K\xeeH\xc8\xa3\x99\xbf\\\xceA4\xc9\xd6', 'client_mac_key': b'\xe1\x1f\x15iA\xad)\xbc\xe1l#\x7f\xf9\x0f\x80)', 'server_mac_key': b'To)\x06N\xb0\xc5\x0e]\x8aL\x01$\xc7-\xd6', 'iv': b'\xf0\xa0A@\x97q \xbd\x00\x05\x12\xb5\x19d\xa0\x83'}
2025-06-08 22:02:45,557 [INFO] [device.py:send_secure_text] Sent header: SECX
2025-06-08 22:02:45,557 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:02:45,557 [INFO] [server.py:<module>] Received header: b'<SECX>'
2025-06-08 22:02:45,557 [INFO] [server.py:<module>] Expecting secure text
2025-06-08 22:02:45,558 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 22:02:45,558 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 22:02:45,558 [INFO] [device.py:send_secure_text] Sent encrypted message
2025-06-08 22:02:45,558 [INFO] [server.py:recv_exact] Receiving exactly 48 bytes...
2025-06-08 22:02:45,558 [INFO] [server.py:recv_exact] Received 48 bytes successfully
2025-06-08 22:02:45,558 [INFO] [server.py:recv_secure_text] Decrypted message: b'Hello, world!'
2025-06-08 22:02:45,558 [INFO] [server.py:<module>] Decrypted message: b'Hello, world!'
2025-06-08 22:02:45,558 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 22:02:45,558 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:02:45,560 [INFO] [device.py:send_secure_text] Server acknowledgement: SEC_TEXT_RECEIVED
2025-06-08 22:02:45,560 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 22:02:45,560 [INFO] [device.py:<module>] Device socket closed
2025-06-08 22:02:45,560 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:02:45,560 [INFO] [server.py:<module>] Received header: b'<ENDD>'
2025-06-08 22:02:45,560 [INFO] [server.py:<module>] Received end of file
2025-06-08 22:02:45,560 [INFO] [server.py:<module>] Server closed
2025-06-08 22:02:45,560 [INFO] [server.py:<module>] Server shut down
2025-06-08 22:07:31,870 [INFO] [server.py:<module>] Server starting
2025-06-08 22:07:31,936 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 22:07:41,900 [INFO] [device.py:<module>] Device started
2025-06-08 22:07:41,967 [INFO] [device.py:<module>] Connected to server
2025-06-08 22:07:41,967 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 22:07:41,967 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 62127)
2025-06-08 22:07:41,967 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:07:41,967 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:07:41,967 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 22:07:41,967 [INFO] [server.py:<module>] Expecting hello
2025-06-08 22:07:41,967 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 22:07:41,968 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 22:07:41,968 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 22:07:41,968 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 22:07:41,968 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 22:07:41,968 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 22:07:41,968 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 22:07:41,968 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 22:07:41,968 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 22:07:41,968 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 22:07:41,971 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 22:07:41,973 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 22:07:41,973 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 22:07:41,974 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 22:07:41,974 [INFO] [device.py:send_hello] Sent nonce: b'\x08X\xf9\x0btt<\xc0\x08\xbe\xa3\xd7\xa3\xf9,!'
2025-06-08 22:07:41,975 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 22:07:41,975 [INFO] [server.py:<module>] Received nonce: b'\x08X\xf9\x0btt<\xc0\x08\xbe\xa3\xd7\xa3\xf9,!'
2025-06-08 22:07:41,975 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 22:07:41,975 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 22:07:41,975 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 22:07:41,975 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 22:07:41,976 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 22:07:41,976 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 22:07:41,976 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 22:07:41,976 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 22:07:41,976 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 22:07:41,976 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 22:07:41,977 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 22:07:41,977 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 22:07:41,979 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 22:07:41,979 [INFO] [server.py:send_hello] Sent nonce: b'0\x984\xd6\xf0SW\xe0\xcb\xcdL\xb2\xa5FEJ'
2025-06-08 22:07:41,979 [INFO] [device.py:recv_hello] Received nonce: b'0\x984\xd6\xf0SW\xe0\xcb\xcdL\xb2\xa5FEJ'
2025-06-08 22:07:41,979 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 22:07:41,980 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 22:07:41,980 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 22:07:41,981 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:07:41,981 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:07:41,981 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 22:07:41,981 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 22:07:41,981 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 22:07:41,981 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 22:07:41,982 [INFO] [server.py:<module>] Received pre-master secret: b'\xf6\xbb\x18\x92\xff7\x13yA\x17b\x01;\xedh#\xf4\xc4\xdby\xf6\x8f\xbeC/\xb8\x96\xc45\x85\xe1\xfb'
2025-06-08 22:07:41,982 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 22:07:41,983 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\x9f\xec6\xe6\xdc\xb9\x10R\xf5\xcf\x18\xd8\x8d\xd47J', 'server_enc_key': b'`\xc2\xf4\x9e<\xd5\xa2\x91"\xe9\xc6\x17\xcc\x811}', 'client_mac_key': b'o\x0e\\\x1a\xd6A\xe7\x85\xbc\xdcH2\x93kn\xf0', 'server_mac_key': b'\xac\xd71\x9f\xbc\x0e\xdd\x8ckU`w\xe8V\xf8A', 'iv': b'h\xb7o\xbe5bN\x80i\n\x9d\xd7\xe2]M\x93'}
2025-06-08 22:07:41,983 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:07:41,984 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 22:07:41,984 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\x9f\xec6\xe6\xdc\xb9\x10R\xf5\xcf\x18\xd8\x8d\xd47J', 'server_enc_key': b'`\xc2\xf4\x9e<\xd5\xa2\x91"\xe9\xc6\x17\xcc\x811}', 'client_mac_key': b'o\x0e\\\x1a\xd6A\xe7\x85\xbc\xdcH2\x93kn\xf0', 'server_mac_key': b'\xac\xd71\x9f\xbc\x0e\xdd\x8ckU`w\xe8V\xf8A', 'iv': b'h\xb7o\xbe5bN\x80i\n\x9d\xd7\xe2]M\x93'}
2025-06-08 22:07:41,986 [ERROR] [device.py:send_secure_image] Failed to send secure image
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/device.py", line 201, in send_secure_image
    encrypted_payload = encrypt_message(payload, keys["client_enc_key"],keys["client_mac_key"],keys["iv"])
TypeError: encrypt_message() takes 2 positional arguments but 4 were given
2025-06-08 22:07:41,991 [WARNING] [server.py:recv_exact] Connection interrupted during receive
2025-06-08 22:07:41,991 [INFO] [server.py:recv_exact] Received 0 bytes successfully
2025-06-08 22:07:41,991 [INFO] [server.py:<module>] Received header: b''
2025-06-08 22:07:41,991 [ERROR] [server.py:<module>] Invalid header received
2025-06-08 22:07:41,991 [INFO] [server.py:<module>] Server shut down
2025-06-08 22:08:27,283 [INFO] [server.py:<module>] Server starting
2025-06-08 22:08:27,352 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 22:08:29,272 [INFO] [device.py:<module>] Device started
2025-06-08 22:08:29,340 [INFO] [device.py:<module>] Connected to server
2025-06-08 22:08:29,340 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 22:08:29,340 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 62134)
2025-06-08 22:08:29,341 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:08:29,341 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:08:29,341 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 22:08:29,341 [INFO] [server.py:<module>] Expecting hello
2025-06-08 22:08:29,341 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 22:08:29,341 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 22:08:29,341 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 22:08:29,341 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 22:08:29,341 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 22:08:29,341 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 22:08:29,341 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 22:08:29,341 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 22:08:29,341 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 22:08:29,341 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 22:08:29,344 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 22:08:29,346 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 22:08:29,346 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 22:08:29,347 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 22:08:29,347 [INFO] [device.py:send_hello] Sent nonce: b']\x99\xe7\xad\xf7\xdb@A\x16)Dl\xa2\x07\x98\xd5'
2025-06-08 22:08:29,347 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 22:08:29,347 [INFO] [server.py:<module>] Received nonce: b']\x99\xe7\xad\xf7\xdb@A\x16)Dl\xa2\x07\x98\xd5'
2025-06-08 22:08:29,347 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 22:08:29,347 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 22:08:29,347 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 22:08:29,347 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 22:08:29,348 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 22:08:29,348 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 22:08:29,348 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 22:08:29,348 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 22:08:29,348 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 22:08:29,348 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 22:08:29,349 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 22:08:29,349 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 22:08:29,351 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 22:08:29,351 [INFO] [server.py:send_hello] Sent nonce: b'\xba\xe3D\x020G$\xee\x1a\xd0\t\xf2\x01\xeaF\xea'
2025-06-08 22:08:29,351 [INFO] [device.py:recv_hello] Received nonce: b'\xba\xe3D\x020G$\xee\x1a\xd0\t\xf2\x01\xeaF\xea'
2025-06-08 22:08:29,351 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 22:08:29,351 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 22:08:29,352 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 22:08:29,352 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:08:29,352 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:08:29,352 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 22:08:29,352 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 22:08:29,352 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 22:08:29,352 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 22:08:29,353 [INFO] [server.py:<module>] Received pre-master secret: b'\x11\xa4\x84\xed\xbfZ\x80\xdf+7\x9a\x0c$J\xb5}"v;Mv\xedJm\x88g\x17\xbba\x99\x8b\\'
2025-06-08 22:08:29,353 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 22:08:29,353 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'?\xb6m\xeeX\x1c\xce\xf8\x82\x0ec{\x9a2aR', 'server_enc_key': b's".\xa6\x02\xef\x18\x9e}@\x80\xde\xdc\xb8\x05,', 'client_mac_key': b'\xb4\xf4\xd8\xb3\xf5\xe3Q\xf2\xbc\x9b\x04\x81U\xc7s\xec', 'server_mac_key': b'~=\x18t\x1f\x97\xd8bR\x9e\x05\xe2\x05\xa3[W', 'iv': b'-\x05Q\xff\xc4!\xd7\xcc\xe2r\x12,rqs\xe6'}
2025-06-08 22:08:29,353 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:08:29,355 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 22:08:29,355 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'?\xb6m\xeeX\x1c\xce\xf8\x82\x0ec{\x9a2aR', 'server_enc_key': b's".\xa6\x02\xef\x18\x9e}@\x80\xde\xdc\xb8\x05,', 'client_mac_key': b'\xb4\xf4\xd8\xb3\xf5\xe3Q\xf2\xbc\x9b\x04\x81U\xc7s\xec', 'server_mac_key': b'~=\x18t\x1f\x97\xd8bR\x9e\x05\xe2\x05\xa3[W', 'iv': b'-\x05Q\xff\xc4!\xd7\xcc\xe2r\x12,rqs\xe6'}
2025-06-08 22:08:29,359 [INFO] [device.py:send_secure_image] Sent header: IMGX
2025-06-08 22:08:29,359 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:08:29,359 [INFO] [device.py:send_secure_image] Sent image payload length: 180848
2025-06-08 22:08:29,359 [INFO] [server.py:<module>] Received header: b'<IMGX>'
2025-06-08 22:08:29,359 [INFO] [server.py:<module>] Expecting secure image
2025-06-08 22:08:29,359 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 22:08:29,359 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 22:08:29,359 [INFO] [server.py:recv_secure_image] Expecting image of 180848 bytes
2025-06-08 22:08:29,359 [INFO] [server.py:recv_exact] Receiving exactly 180848 bytes...
2025-06-08 22:08:29,360 [INFO] [server.py:recv_exact] Received 180848 bytes successfully
2025-06-08 22:08:29,361 [INFO] [server.py:recv_secure_image] Decrypted image payload: b'{"filename": "test.png", "image_data": "", "signature": "AClEucz8damycQvMYgCjiFS930AP8tO6uuG2A3sAFGHbEjApRTu7RxQib7Qyj0wpmtFOo82nW7qKUUVVPjdmkzDUwTna24HUXazDBnETP/CGOEBlR8fVdQ5ZxF32/UZZm9ZE5GmQIfoUdXoWwuV3pvHsTclsYQJnKGhHG7XA8zxQyDqUaDO2qrg2m8pMEXp7rrewVsubuOieEtqOy3IA1M+txsQo2K+6j7yYDC+oAT4TGwC407x4qcR4nILASRAoKkaWu4QUwdjlU16rLPk4CF8GNa3okPCsyr0M4IfWnDzTkuvzn+486Ior1P83N9fZ/x+fFMsG05FWmIV3SJkvCA=="}'
2025-06-08 22:08:29,380 [INFO] [server.py:recv_secure_image] Image verified successfully
2025-06-08 22:08:29,380 [INFO] [server.py:recv_secure_image] Sent acknowledgement
2025-06-08 22:08:29,382 [ERROR] [server.py:recv_secure_image] Failed to receive secure image
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 128, in recv_secure_image
    f.write(decrypted_image_payload.image_data)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'bytes' object has no attribute 'image_data'
2025-06-08 22:08:29,419 [INFO] [device.py:send_secure_image] Server acknowledgement: IMX_RECEIVED
2025-06-08 22:08:29,422 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 22:08:29,434 [INFO] [server.py:<module>] Decrypted image payload: None
2025-06-08 22:08:29,434 [INFO] [device.py:<module>] Device socket closed
2025-06-08 22:08:29,434 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:08:29,434 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:08:29,435 [INFO] [server.py:<module>] Received header: b'<ENDD>'
2025-06-08 22:08:29,435 [INFO] [server.py:<module>] Received end of file
2025-06-08 22:08:29,435 [INFO] [server.py:<module>] Server closed
2025-06-08 22:08:29,435 [INFO] [server.py:<module>] Server shut down
2025-06-08 22:11:16,107 [INFO] [server.py:<module>] Server starting
2025-06-08 22:11:16,175 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 22:12:01,894 [INFO] [device.py:<module>] Device started
2025-06-08 22:12:01,962 [INFO] [device.py:<module>] Connected to server
2025-06-08 22:12:01,962 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 22:12:01,962 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 62186)
2025-06-08 22:12:01,962 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:12:01,962 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:12:01,962 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 22:12:01,962 [INFO] [server.py:<module>] Expecting hello
2025-06-08 22:12:01,962 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 22:12:01,962 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 22:12:01,962 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 22:12:01,962 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 22:12:01,962 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 22:12:01,962 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 22:12:01,962 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 22:12:01,962 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 22:12:01,962 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 22:12:01,962 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 22:12:01,965 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 22:12:01,967 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 22:12:01,967 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 22:12:01,968 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 22:12:01,968 [INFO] [device.py:send_hello] Sent nonce: b'8\xa7\x9a6\xc7\xf9t\xa7i\xc6\x12\xc2|\t1\xc7'
2025-06-08 22:12:01,969 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 22:12:01,969 [INFO] [server.py:<module>] Received nonce: b'8\xa7\x9a6\xc7\xf9t\xa7i\xc6\x12\xc2|\t1\xc7'
2025-06-08 22:12:01,969 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 22:12:01,969 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 22:12:01,969 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 22:12:01,969 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 22:12:01,970 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 22:12:01,970 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 22:12:01,970 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 22:12:01,970 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 22:12:01,970 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 22:12:01,970 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 22:12:01,971 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 22:12:01,971 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 22:12:01,973 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 22:12:01,973 [INFO] [server.py:send_hello] Sent nonce: b')WE\xa3\xf4\xf9\xfc\xf6n\xadN\x10\xfd\xbe\x19\xa3'
2025-06-08 22:12:01,973 [INFO] [device.py:recv_hello] Received nonce: b')WE\xa3\xf4\xf9\xfc\xf6n\xadN\x10\xfd\xbe\x19\xa3'
2025-06-08 22:12:01,973 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 22:12:01,973 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 22:12:01,974 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 22:12:01,974 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:12:01,974 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:12:01,974 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 22:12:01,974 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 22:12:01,974 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 22:12:01,974 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 22:12:01,976 [INFO] [server.py:<module>] Received pre-master secret: b'\xa7<\x9d \xf7lN7\x1e\x8aP\x04s\xb4\\d\xc4\xe5s\x82\xa2\xfa<\x84\x1e\xe2Wj\xb5Z\xcao'
2025-06-08 22:12:01,976 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 22:12:01,976 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\xe2\xa8_\xfa\x1c\xc5B4pfg\xac4\xb0G\xb8', 'server_enc_key': b',a\xae(\x84\xc0I\xd1t\xb8\xb5\xef\xec\xd5\xc9\xb1', 'client_mac_key': b'\xcc\xa4o\x19\xba\xc3\x15p]\xd3\xe1Mvf\t2', 'server_mac_key': b'\xde\xdaK\x87\xc8\x9f\xedhy\x86\xde\x00\xf6S\xf9A', 'iv': b'\x88\xda!\xec\x8d\x13K~{(a\n\xe5G{\xdf'}
2025-06-08 22:12:01,976 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:12:01,977 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 22:12:01,977 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\xe2\xa8_\xfa\x1c\xc5B4pfg\xac4\xb0G\xb8', 'server_enc_key': b',a\xae(\x84\xc0I\xd1t\xb8\xb5\xef\xec\xd5\xc9\xb1', 'client_mac_key': b'\xcc\xa4o\x19\xba\xc3\x15p]\xd3\xe1Mvf\t2', 'server_mac_key': b'\xde\xdaK\x87\xc8\x9f\xedhy\x86\xde\x00\xf6S\xf9A', 'iv': b'\x88\xda!\xec\x8d\x13K~{(a\n\xe5G{\xdf'}
2025-06-08 22:12:01,981 [INFO] [device.py:send_secure_image] Sent header: IMGX
2025-06-08 22:12:01,981 [INFO] [device.py:send_secure_image] Sent image payload length: 180848
2025-06-08 22:12:01,981 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:12:01,981 [INFO] [server.py:<module>] Received header: b'<IMGX>'
2025-06-08 22:12:01,981 [INFO] [server.py:<module>] Expecting secure image
2025-06-08 22:12:01,981 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 22:12:01,981 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 22:12:01,981 [INFO] [server.py:recv_secure_image] Expecting image of 180848 bytes
2025-06-08 22:12:01,981 [INFO] [server.py:recv_exact] Receiving exactly 180848 bytes...
2025-06-08 22:12:01,981 [INFO] [server.py:recv_exact] Received 180848 bytes successfully
2025-06-08 22:12:01,982 [INFO] [server.py:recv_secure_image] Decrypted image payload: b'{"filename": "test.png", "image_data": "", "signature": "HI+Ix+hcWR27v66q6sXruON9OfTwBbbvU4hzE5bHoG2HsfqYbJgUMkG1Dem6YL2kM8wnTl8nxaBdZ70zmUJH+QB8Pt+L3ShwZC8EHlF5JZOR60iSkDyJ97VGF06Po0/hZ8VfYMbslVZRCPNQoE0bhU1IRBxeppS/Sb/evB9BinVIa7TCZUqYVsYpgdAxzA2ZgTcGSLV3+aq896s0DlwqVG87hcjqPorvzPLxCwNFRgFaQ8LArOUt1y8ZqlYlHVzYs3lI4ZWOO22gAo1ETIzz81zvuPR88yG6QQ+mRoCwWg61hRNyGDPhPVmL4Pl9CJVfVc0WGxnzHLpiDq3Kr67U3g=="}'
2025-06-08 22:12:02,005 [INFO] [server.py:recv_secure_image] Image verified successfully
2025-06-08 22:12:02,006 [INFO] [server.py:recv_secure_image] Sent acknowledgement
2025-06-08 22:12:02,007 [INFO] [device.py:send_secure_image] Server acknowledgement: IMX_RECEIVED
2025-06-08 22:12:02,007 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 22:12:02,007 [INFO] [device.py:<module>] Device socket closed
2025-06-08 22:12:02,006 [ERROR] [server.py:recv_secure_image] Failed to receive secure image
Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 50, in save_verified_image
    image_data = base64.b64decode(payload["image"])
                                  ~~~~~~~^^^^^^^^^
KeyError: 'image'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/omerfarukbulut/info_sec/server.py", line 150, in recv_secure_image
    save_path = save_verified_image(decrypted_image_payload)
  File "/Users/omerfarukbulut/info_sec/server.py", line 66, in save_verified_image
    raise Exception(f"Failed to save image: {e}")
Exception: Failed to save image: 'image'
2025-06-08 22:12:02,008 [INFO] [server.py:<module>] Decrypted image payload: None
2025-06-08 22:12:02,008 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:12:02,008 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:12:02,008 [INFO] [server.py:<module>] Received header: b'<ENDD>'
2025-06-08 22:12:02,008 [INFO] [server.py:<module>] Received end of file
2025-06-08 22:12:02,008 [INFO] [server.py:<module>] Server closed
2025-06-08 22:12:02,008 [INFO] [server.py:<module>] Server shut down
2025-06-08 22:12:36,560 [INFO] [server.py:<module>] Server starting
2025-06-08 22:12:36,629 [INFO] [server.py:<module>] Server listening on port 9999
2025-06-08 22:12:38,095 [INFO] [device.py:<module>] Device started
2025-06-08 22:12:38,162 [INFO] [device.py:<module>] Connected to server
2025-06-08 22:12:38,162 [INFO] [device.py:send_hello] Sent header: HELLO
2025-06-08 22:12:38,162 [INFO] [server.py:<module>] Accepted connection from ('127.0.0.1', 62190)
2025-06-08 22:12:38,162 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:12:38,162 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:12:38,162 [INFO] [server.py:<module>] Received header: b'<HELO>'
2025-06-08 22:12:38,162 [INFO] [server.py:<module>] Expecting hello
2025-06-08 22:12:38,162 [INFO] [server.py:recv_certificate] Receiving certificate header (length)...
2025-06-08 22:12:38,162 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 22:12:38,162 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 22:12:38,162 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 22:12:38,162 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 22:12:38,162 [INFO] [server.py:recv_certificate] Length bytes (raw): 00000371
2025-06-08 22:12:38,162 [INFO] [server.py:recv_certificate] Expecting certificate of 881 bytes
2025-06-08 22:12:38,162 [INFO] [server.py:recv_exact] Receiving exactly 881 bytes...
2025-06-08 22:12:38,162 [INFO] [server.py:recv_exact] Received 881 bytes successfully
2025-06-08 22:12:38,162 [INFO] [server.py:recv_certificate] Received certificate from client
2025-06-08 22:12:38,165 [INFO] [server.py:recv_certificate] Sent acknowledgement
2025-06-08 22:12:38,167 [INFO] [server.py:<module>] Certificate validated successfully
2025-06-08 22:12:38,167 [INFO] [server.py:recv_exact] Receiving exactly 16 bytes...
2025-06-08 22:12:38,168 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 22:12:38,169 [INFO] [device.py:send_hello] Sent nonce: b"\xcez\xd5\xd4\xb6,'b\x0f\xb4P<\xe4\xca\x03\x80"
2025-06-08 22:12:38,169 [INFO] [server.py:recv_exact] Received 16 bytes successfully
2025-06-08 22:12:38,169 [INFO] [server.py:<module>] Received nonce: b"\xcez\xd5\xd4\xb6,'b\x0f\xb4P<\xe4\xca\x03\x80"
2025-06-08 22:12:38,169 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 22:12:38,169 [INFO] [server.py:send_hello] Sent header: HELLO
2025-06-08 22:12:38,169 [INFO] [ca_cert.py:send_certificate] Sent certificate length: 881
2025-06-08 22:12:38,169 [INFO] [ca_cert.py:send_certificate] Sent certificate
2025-06-08 22:12:38,170 [INFO] [device.py:send_hello] Server acknowledgement: HELLO_RECEIVED
2025-06-08 22:12:38,170 [INFO] [device.py:recv_hello] Received header: HELLO
2025-06-08 22:12:38,170 [INFO] [device.py:recv_hello] Recieving server certificate length..
2025-06-08 22:12:38,170 [INFO] [device.py:recv_hello] Expecting server cert length 881 bytes.
2025-06-08 22:12:38,170 [INFO] [device.py:recv_hello] Received server certificate: 
2025-06-08 22:12:38,170 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 22:12:38,171 [INFO] [device.py:recv_hello] Server certificate validated successfully
2025-06-08 22:12:38,171 [INFO] [device.py:recv_hello] Recieving server nonce..
2025-06-08 22:12:38,173 [INFO] [ca_cert.py:send_certificate] Server acknowledgement: CERT_RECEIVED
2025-06-08 22:12:38,173 [INFO] [server.py:send_hello] Sent nonce: b"\xf2\xb8\x98Th?m'\xb0\x9a\xa9'\xfa\xe59/"
2025-06-08 22:12:38,173 [INFO] [device.py:recv_hello] Received nonce: b"\xf2\xb8\x98Th?m'\xb0\x9a\xa9'\xfa\xe59/"
2025-06-08 22:12:38,173 [INFO] [device.py:recv_hello] Sent acknowledgement
2025-06-08 22:12:38,174 [INFO] [device.py:send_pre_master_secret] Sent pre-master secret
2025-06-08 22:12:38,174 [INFO] [server.py:send_hello] Device acknowledgement: NONCE_RECEIVED
2025-06-08 22:12:38,174 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:12:38,174 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:12:38,174 [INFO] [server.py:<module>] Received header: b'<PREM>'
2025-06-08 22:12:38,174 [INFO] [server.py:<module>] Expecting pre-master secret
2025-06-08 22:12:38,174 [INFO] [server.py:recv_exact] Receiving exactly 256 bytes...
2025-06-08 22:12:38,174 [INFO] [server.py:recv_exact] Received 256 bytes successfully
2025-06-08 22:12:38,176 [INFO] [server.py:<module>] Received pre-master secret: b'\x0b\xa6\x1al\x8c\x17\x8f)F\xcf?\xd3\x8ce\xc8T#\xe6\x94\xfb\xaf~\x95\x89\x05mm\x91k\xc5%\xeb'
2025-06-08 22:12:38,176 [INFO] [server.py:<module>] Sent acknowledgement
2025-06-08 22:12:38,176 [INFO] [server.py:<module>] Derived keys: {'client_enc_key': b'\x9a*B\xd3|-xl\xe2\x16\xd1\x8by%\xd4\x10', 'server_enc_key': b'\xf5\xda\xbc\xa0\xe9\xeb`\x9e\x97\xce0\xea\xfe\xa4$\xc6', 'client_mac_key': b'\x08\xd9f\xb2v\x07\xfc\x1fJ,S&=B\x90\xb2', 'server_mac_key': b'\xed"\xa9],\x98S5\xa03\xb7\x118 \xe0/', 'iv': b'\xac\x9e{\x08\x02\xf7\x9e\xb1~\xa7\xe0\xac\xceP/\\'}
2025-06-08 22:12:38,176 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:12:38,177 [INFO] [device.py:send_pre_master_secret] Server acknowledgement: PREM_RECEIVED
2025-06-08 22:12:38,177 [INFO] [device.py:<module>] Derived keys: {'client_enc_key': b'\x9a*B\xd3|-xl\xe2\x16\xd1\x8by%\xd4\x10', 'server_enc_key': b'\xf5\xda\xbc\xa0\xe9\xeb`\x9e\x97\xce0\xea\xfe\xa4$\xc6', 'client_mac_key': b'\x08\xd9f\xb2v\x07\xfc\x1fJ,S&=B\x90\xb2', 'server_mac_key': b'\xed"\xa9],\x98S5\xa03\xb7\x118 \xe0/', 'iv': b'\xac\x9e{\x08\x02\xf7\x9e\xb1~\xa7\xe0\xac\xceP/\\'}
2025-06-08 22:12:38,180 [INFO] [device.py:send_secure_image] Sent header: IMGX
2025-06-08 22:12:38,181 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:12:38,181 [INFO] [server.py:<module>] Received header: b'<IMGX>'
2025-06-08 22:12:38,181 [INFO] [device.py:send_secure_image] Sent image payload length: 180848
2025-06-08 22:12:38,181 [INFO] [server.py:<module>] Expecting secure image
2025-06-08 22:12:38,181 [INFO] [server.py:recv_exact] Receiving exactly 4 bytes...
2025-06-08 22:12:38,181 [INFO] [server.py:recv_exact] Received 4 bytes successfully
2025-06-08 22:12:38,181 [INFO] [server.py:recv_secure_image] Expecting image of 180848 bytes
2025-06-08 22:12:38,181 [INFO] [server.py:recv_exact] Receiving exactly 180848 bytes...
2025-06-08 22:12:38,181 [INFO] [server.py:recv_exact] Received 180848 bytes successfully
2025-06-08 22:12:38,182 [INFO] [server.py:recv_secure_image] Decrypted image payload: b'{"filename": "test.png", "image_data": "", "signature": "J+AaO9mOEzaytT3phpokmOHRZeU/2qKphsiatBG7dmiHwlpeFIg+MaommVzZJk0gr5wOg2gXoLW/r4BpqbxqgdSIpdaeQUszKaMBiS4TZTy9Wpa59B3pd1RroMOKhfF3kY0Hf1vRTPrnJqm3pnaQ3YLtPRjf+YJcRDKZ6+K9b5GFOeR7cZTl5zCKyZn7JqOr30Csi2njSai+WxqlDQYPzQoGqsJJVtGskpp272LcGq2lHvQ5sulUnZ6vmi3XznNoatvb26doq/HPGZygbESvRGvQ2IAhNDz0yc0nVlc89lW2d2TnDE49lPkTPBlUROhhK+KMuAtPMF+zAe52yvBf8A=="}'
2025-06-08 22:12:38,192 [INFO] [server.py:recv_secure_image] Image verified successfully
2025-06-08 22:12:38,192 [INFO] [server.py:recv_secure_image] Sent acknowledgement
2025-06-08 22:12:38,193 [INFO] [server.py:recv_secure_image] Saved image to received_images/20250608_221238_test.png
2025-06-08 22:12:38,193 [INFO] [server.py:<module>] Decrypted image payload: received_images/20250608_221238_test.png
2025-06-08 22:12:38,193 [INFO] [server.py:recv_exact] Receiving exactly 6 bytes...
2025-06-08 22:12:38,193 [INFO] [device.py:send_secure_image] Server acknowledgement: IMX_RECEIVED
2025-06-08 22:12:38,194 [INFO] [device.py:send_end_of_file] Sent header: END
2025-06-08 22:12:38,194 [INFO] [server.py:recv_exact] Received 6 bytes successfully
2025-06-08 22:12:38,194 [INFO] [server.py:<module>] Received header: b'<ENDD>'
2025-06-08 22:12:38,194 [INFO] [server.py:<module>] Received end of file
2025-06-08 22:12:38,194 [INFO] [device.py:<module>] Device socket closed
2025-06-08 22:12:38,194 [INFO] [server.py:<module>] Server closed
2025-06-08 22:12:38,194 [INFO] [server.py:<module>] Server shut down
